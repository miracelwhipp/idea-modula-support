

{
    parserClass="org.modula.parsing.definition.DefinitionParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

	psiClassPrefix="Definition"
	psiImplClassSuffix="Impl"
	psiPackage="org.modula.parsing.definition.psi"
	psiImplPackage="org.modula.parsing.definition.psi.impl"

	elementTypeHolderClass="org.modula.parsing.definition.psi.ModulaTypes"
	elementTypeClass="org.modula.parsing.psi.ModulaElementType"
	tokenTypeClass="org.modula.parsing.psi.ModulaTokenType"
}

root ::= definitionFile

definitionFile ::= header import_clause* definition_clause* footer

import_clause ::= module_import_clause | symbol_import_clause

symbol_import_clause ::= FROM module_name IMPORT import_symbol (COMMA import_symbol)* END_OF_STATEMENT
module_import_clause ::= IMPORT module_import (COMMA module_import)* END_OF_STATEMENT

module_import ::= module_name
{
	extends = "org.modula.parsing.psi.ModuleImportStore"
}

import_symbol ::= IDENTIFIER
{
	extends = "org.modula.parsing.psi.SymbolImportStore"
}

private recover_by_end_of_statement ::= END_OF_STATEMENT

header ::= (generic_module_definition | module_definition) END_OF_STATEMENT

module_definition ::= (UNSAFEGUARDED)? DEFINITION MODULE module_name
{
	stubClass = "org.modula.helpers.index.stubs.ModuleStub"
	elementTypeClass = "org.modula.helpers.index.stub.element.types.ModuleStubElementType"
}

generic_module_definition ::= GENERIC module_definition module_parameters

module_parameters ::= module_parameter (END_OF_STATEMENT module_parameter)*
module_parameter ::= constant_value_module_parameter | type_parameter

constant_value_module_parameter ::= module_parameter_name (COMMA module_parameter_name)* TYPING_OPERATOR type_specification
type_parameter ::= module_parameter_name (COMMA module_parameter_name)* TYPING_OPERATOR TYPE
module_parameter_name ::= IDENTIFIER


footer ::= END module_name DOT

module_name ::= IDENTIFIER

basic_type ::= TOKEN_INTEGER | TOKEN_CARDINAL | TOKEN_REAL | TOKEN_LONGREAL | TOKEN_COMPLEX | TOKEN_LONGCOMPLEX |
					TOKEN_BOOLEAN | TOKEN_CHAR | TOKEN_BITSET
stony_brook_type ::= TOKEN_SHORTINT | TOKEN_SHORTCARD | TOKEN_INTEGER16 | TOKEN_CARDINAL16 | TOKEN_INTEGER32 |
					TOKEN_CARDINAL32 | TOKEN_LONGINT | TOKEN_LONGCARD | TOKEN_INTEGER64 | TOKEN_CARDINAL64 |
					TOKEN_ACHAR | TOKEN_UCHAR | TOKEN_BYTEBOOL | TOKEN_WORDBOOL | TOKEN_DWORDBOOL |
					TOKEN_BITSET16 | TOKEN_BITSET32
predefined_type ::= basic_type | stony_brook_type
type_specification ::= predefined_type | pointer_definition | set_definition | array_definition | record_definition
                         | enumeration_definition | procedure_type_definition | range | type_designator

pointer_definition ::= POINTER TO type_specification

set_definition ::= (SET|PACKEDSET) OF type_specification (BIG|SMALL)?

array_definition ::= ARRAY index_type (COMMA index_type)* OF type_specification
index_type ::= TOKEN_BOOLEAN | TOKEN_CHAR | range | type_designator

record_definition ::= RECORD fields END
fields ::= (field (END_OF_STATEMENT field)*)? END_OF_STATEMENT?
field ::= variant_field | static_field
static_field ::= field_name (COMMA field_name)* TYPING_OPERATOR type_specification
field_name ::= IDENTIFIER
variant_field ::= CASE (field_name)? TYPING_OPERATOR type_specification OF variants END
variants ::= variant (PIPE variant)* (ELSE fields?)?
variant ::= selector TYPING_OPERATOR fields
selector ::= case_range (COMMA case_range)*
case_range ::= inner_range | literal


definition_clause ::= procedure_definition | type_definitions | constant_definitions | variable_definitions

variable_definitions ::= VAR (variable_definition)*
macro_variable_definitions ::= VAR (macro_variable_definition)*

variable_definition ::= variable_name_definition export_name_declaration? (COMMA variable_name_definition export_name_declaration?)*
							variable_modifiers TYPING_OPERATOR type_specification
							(EQUALITY_OPERATOR constant_value)? END_OF_STATEMENT
{
	pin=1
	recoverWhile=recover_while_statement
}

variable_name_definition ::= variable_name
{
	implements = ["com.intellij.psi.PsiElement" "org.modula.helpers.index.stubs.Variable" "org.modula.helpers.index.stubs.SymbolStubPsiElement"]
	extends = "org.modula.helpers.index.stub.delegators.VariableStubBasedPsiElement"
	stubClass = "org.modula.helpers.index.stubs.VariableStub"
	elementTypeClass = "org.modula.helpers.index.stub.element.types.VariableStubElementType"
}

macro_variable_definition ::= variable_name (COMMA variable_name)* variable_modifiers TYPING_OPERATOR
									type_specification (EQUALITY_OPERATOR constant_value)? END_OF_STATEMENT {pin=1 recoverUntil=recover_by_end_of_statement}

variable_modifiers ::= (SQUARE_BRACE_OPEN VOLATILE SQUARE_BRACE_CLOSE)?
							(SQUARE_BRACE_OPEN (SQUARE_BRACE_OPEN (NEAR | FAR) SQUARE_BRACE_CLOSE)? STRING_CONST_SINGLE (PUBLIC | EXTERNAL)? SQUARE_BRACE_CLOSE)?
							(SQUARE_BRACE_OPEN DLLACCESS (STRING_CONST_SINGLE)? SQUARE_BRACE_CLOSE)?

variable_name ::= IDENTIFIER

generic_designator ::= symbol_name ('^'* DOT symbol_name)*
symbol_name ::= IDENTIFIER

type_designator ::= generic_designator
type_name ::= IDENTIFIER

named_type ::= type_designator | basic_type | stony_brook_type

constant_definitions ::= CONST (constant_definition)* //{pin=1 recoverWhile=recover_while_statement}
macro_constant_definitions ::= CONST (macro_constant_definition)* //{pin=1 recoverWhile=recover_while_statement}

recover_while_statement ::= (!(END_OF_STATEMENT))*

constant_definition ::= constant_name EQUALITY_OPERATOR constant_value END_OF_STATEMENT
{
	implements = ["com.intellij.psi.PsiElement" "org.modula.helpers.index.stubs.Constant" "org.modula.helpers.index.stubs.SymbolStubPsiElement"]
	extends = "org.modula.helpers.index.stub.delegators.ConstantStubBasedPsiElement"
	stubClass = "org.modula.helpers.index.stubs.ConstantStub"
	elementTypeClass = "org.modula.helpers.index.stub.element.types.ConstantStubElementType"
}


macro_constant_definition ::= constant_name EQUALITY_OPERATOR constant_value END_OF_STATEMENT

constant_name ::= IDENTIFIER

integer_literal ::= INT_CONST_BASE_8 | INT_CONST_BASE_16 | INT_CONST_BASE_10
constant_value ::= array_constant | record_constant | const_expression

//constant_expression ::=  constant_sum relational_operator constant_expression | constant_sum
//constant_sum ::= (PLUS | MINUS)? constant_product sum_operator constant_sum | (PLUS | MINUS)? constant_product
//constant_product ::= constant_negation product_operator constant_product | constant_negation
//constant_negation ::= negation_operator constant_negation | constant_function_call
//constant_function_call ::= function_designator OPEN_BRACE (constant_parameter (COMMA constant_parameter)*)? CLOSE_BRACE | constant_expression_value
//constant_parameter ::= constant_expression | type_specification
//constant_expression_value ::= literal | constant_designator | OPEN_BRACE constant_expression CLOSE_BRACE

function_designator ::= generic_designator
constant_designator ::= generic_designator

private relational_operator ::= LESS_THAN | LESS_EQUALS | EQUALITY_OPERATOR | GREATER_EQUALS | GREATER_THAN | DIFFERENT | CONTAINS
private sum_operator ::= PLUS | MINUS | OR | BITWISE_OR | BITWISE_XOR
private product_operator ::= TIMES | BY | REMAINDER | DIVISION | MODULO | AND | BITWISE_AND | SHIFT_LEFT | SHIFT_RIGHT | SHIFT_ARITHMETIC_RIGHT | ROTATE_LEFT | ROTATE_RIGHT
private negation_operator ::= NOT | BITWISE_NOT

literal ::= integer_literal | complex_literal | set_literal | enumeration_member_designator |
					CHAR_CONST | real_literal | STRING_CONST_SINGLE | STRING_CONST_DOUBLE | STRING_CONST_SINGLE_UNICODE |
					STRING_CONST_DOUBLE_UNICODE | STRING_CONST_SINGLE_ANSI | STRING_CONST_DOUBLE_ANSI
real_literal ::= REAL_CONST
set_literal ::= set_designator CURLY_BRACE_OPEN (literal (COMMA literal)*)? CURLY_BRACE_CLOSE
set_designator ::= generic_designator

enumeration_member_designator ::= generic_designator

complex_literal ::= CMPLX OPEN_BRACE real_literal COMMA real_literal CLOSE_BRACE
array_constant ::= array_constant_type CURLY_BRACE_OPEN (constant_array_element (COMMA constant_array_element)*)? CURLY_BRACE_CLOSE
array_constant_type ::= constant_type | array_declaration
constant_array_element ::= inner_range | integer_literal ARRAY_ELEMENT_RANGE_OPERATOR integer_literal | constant_value
record_constant ::= constant_type CURLY_BRACE_OPEN constant_value (COMMA constant_value)* CURLY_BRACE_CLOSE
constant_type ::= IDENTIFIER

array_declaration ::= ARRAY (range)? OF constant_type
range ::= (named_type)? SQUARE_BRACE_OPEN inner_range SQUARE_BRACE_CLOSE
inner_range ::= const_expression RANGE_OPERATOR const_expression

procedure_type_definition ::= PROCEDURE (OPEN_BRACE parameters_comma_separated? CLOSE_BRACE (TYPING_OPERATOR type_specification)? procedure_attributes?)?

procedure_definition ::= PROCEDURE procedure_name export_name_declaration? parameters?
								(TYPING_OPERATOR type_specification)? procedure_attributes? END_OF_STATEMENT
								(procedure_modifiers)?
{
	implements = ["com.intellij.psi.PsiElement" "org.modula.helpers.index.stubs.Procedure" "org.modula.helpers.index.stubs.SymbolStubPsiElement"]
	extends = "org.modula.helpers.index.stub.delegators.ProcedureStubBasedPsiElement"
	stubClass = "org.modula.helpers.index.stubs.ProcedureStub"
	elementTypeClass = "org.modula.helpers.index.stub.element.types.ProcedureStubElementType"
}



export_name_declaration ::= SQUARE_BRACE_OPEN (STRING_CONST_SINGLE | STRING_CONST_DOUBLE) SQUARE_BRACE_CLOSE

procedure_attributes ::= SQUARE_BRACE_OPEN attribute (COMMA attribute)* SQUARE_BRACE_CLOSE
//TODO: identify procedure attributes
attribute ::= IDENTIFIER OPEN_BRACE (attribute? (COMMA attribute?)* )? CLOSE_BRACE | IDENTIFIER

macro_declaration ::= MACRO END_OF_STATEMENT macro_inner_declarations BEGIN statements END procedure_name
macro_inner_declarations ::= (macro_type_definitions | macro_variable_definitions | macro_constant_definitions)*

procedure_modifiers ::= (FORWARD | macro_declaration | ASSEMBLER | PUREASM) END_OF_STATEMENT

parameters ::= OPEN_BRACE (parameter (END_OF_STATEMENT parameter)*)? CLOSE_BRACE

parameters_comma_separated ::= anonymous_parameter (COMMA anonymous_parameter)*

statements ::= statement (END_OF_STATEMENT statement)*

statement ::= do_statement | loop_statement | if_statement | case_statement | assignment {
	recoverWhile = "recover_end_of_statement"
}

recover_end_of_statement ::= !(END_OF_STATEMENT | END)

do_statement ::= DO statements END
loop_statement ::= LOOP statements END
if_statement ::= IF statements END
case_statement ::= CASE statements END
assignment ::= l_value ASSIGNMENT_OPERATOR expression
l_value ::= generic_designator
whatever ::= (expression | literal | ASSIGNMENT_OPERATOR | SQUARE_BRACE_OPEN | SQUARE_BRACE_CLOSE | DOT | COMMA |
				CURLY_BRACE_OPEN | CURLY_BRACE_CLOSE | THEN | ELSE | ELSIF | FOR | TO | BY | CASE |
				OF | WHILE | REPEAT | UNTIL | WITH | EXIT | RETURN | ANYTHING | OPEN_BRACE | CLOSE_BRACE | IDENTIFIER)*

parameter ::= ((VAR (INOUT | OUT)?)| CONST)? parameter_name (COMMA parameter_name)* TYPING_OPERATOR (NEAR|FAR|VALUE|NOHIGH)? (ARRAY OF)* type_specification
anonymous_parameter ::= ((VAR (INOUT | OUT)?)| CONST)? (NEAR|FAR|VALUE|NOHIGH)? (ARRAY OF)* type_specification

parameter_name ::= IDENTIFIER
procedure_name ::= IDENTIFIER

type_definitions ::= TYPE type_definition*
macro_type_definitions ::= TYPE macro_type_definition*

type_definition ::= (type_alias_definition | opaque_type_definition) END_OF_STATEMENT
{
	implements = ["com.intellij.psi.PsiElement" "org.modula.helpers.index.stubs.Type" "org.modula.helpers.index.stubs.SymbolStubPsiElement"]
	extends = "org.modula.helpers.index.stub.delegators.TypeStubBasedPsiElement"
	stubClass = "org.modula.helpers.index.stubs.TypeStub"
	elementTypeClass = "org.modula.helpers.index.stub.element.types.TypeStubElementType"
}

macro_type_definition ::= (type_alias_definition | opaque_type_definition) END_OF_STATEMENT

opaque_type_definition ::= IDENTIFIER

ignored ::= DOCUMENTATION_COMMENT COMMENT COMPILE_TIME_IF COMPILE_TIME_CONDITION
				COMPILE_TIME_THEN COMPILE_TIME_ELSE COMPILE_TIME_INVALID_CODE COMPILE_TIME_END COMPILER_DIRECTIVE

type_alias_definition ::= type_name EQUALITY_OPERATOR type_specification

enumeration_definition ::= OPEN_BRACE enumeration_member_definition
								(COMMA enumeration_member_definition)* CLOSE_BRACE (BIG | SMALL)?
enumeration_member_definition ::= enumeration_member_name (EQUALITY_OPERATOR integer_literal)?
enumeration_member_name ::= IDENTIFIER

//TODO: look at https://github.com/JetBrains/Grammar-Kit/blob/master/HOWTO.md#24-compact-expression-parsing-with-priorities

//expression ::=  sum relational_operator expression | sum
//sum ::= (PLUS | MINUS)? product sum_operator sum | (PLUS | MINUS)? product
//product ::= negation product_operator product | negation
//negation ::= negation_operator negation | function_call
//function_call ::= call | expression_value
//call ::= function_designator OPEN_BRACE (call_parameter (COMMA call_parameter)*)? CLOSE_BRACE
//call_parameter ::= expression | type_specification
//expression_value ::= literal | constant_designator | OPEN_BRACE expression CLOSE_BRACE


expression ::= simple_expression (relational_operator simple_expression)?
simple_expression ::= (PLUS | MINUS)? term ((PLUS | MINUS | OR) term)*
term ::= factor ((TIMES | BY | DIVISION | MODULO | REMAINDER | AND) factor)*
factor ::= number | string | set_expression | NOT factor |
				designator (OPEN_BRACE (expression (COMMA expression)*)? CLOSE_BRACE)
number ::= integer_literal | real_literal
string ::= STRING_CONST_DOUBLE | STRING_CONST_DOUBLE_ANSI | STRING_CONST_DOUBLE_UNICODE | STRING_CONST_SINGLE |
				STRING_CONST_SINGLE_ANSI | STRING_CONST_SINGLE_UNICODE
set_expression ::= qualident CURLY_BRACE_OPEN (element (COMMA elemten)*)?  CURLY_BRACE_CLOSE
qualident ::= ident (DOT ident)*
ident ::= IDENTIFIER
element ::= const_expression (RANGE_OPERATOR const_expression)*
designator ::= qualident ((DOT ident) | (SQUARE_BRACE_OPEN expression (COMMA expression)* SQUARE_BRACE_CLOSE) |
				POINTER_DEREFERENCE_OPERATOR)*

const_expression ::= simple_const_expression (relational_operator simple_const_expression)?
simple_const_expression ::= (PLUS | MINUS)? const_term ((PLUS | MINUS | OR) const_term)*
const_term ::= const_factor ((TIMES | BY | DIVISION | MODULO | REMAINDER | AND) const_factor)*
const_factor ::= number | string | set_expression | (OPEN_BRACE const_expression CLOSE_BRACE) |
					(NOT const_factor) | designator (OPEN_BRACE (const_expression (COMMA const_expression)*)? CLOSE_BRACE)?

