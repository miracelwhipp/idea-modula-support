/* The following code was generated by JFlex 1.4.3 on 27.10.14 18:55 */

 package org.modula.parsing.grammar;

import com.intellij.openapi.project.Project;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.modula.parsing.definition.psi.ModulaTypes;
import com.intellij.psi.TokenType;
import org.modula.parsing.psi.ModulaTokenType;
import org.modula.parsing.grammar.ModulaSpecialtyAwareLexer;
import org.modula.parsing.grammar.ModulaLexerBase;
import org.modula.parsing.ModulaParseException;
import org.modula.CompileTimeConditionLanguage;
import org.modula.P1CompileTimeConditionLanguage;
import org.modula.parsing.utility.BooleanStackSerializableAsShort;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 27.10.14 18:55 from the specification file
 * <tt>C:/projects/idea-modula-support/ims-plugin/src/main/java/org/modula/parsing/grammar/Modula.flex</tt>
 */
public class ModulaLexer extends ModulaLexerBase implements ModulaSpecialtyAwareLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int ERRORNEOUS_CONDITIONAL_CODE = 10;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 4;
  public static final int INVALID_CONDITIONAL_CODE = 8;
  public static final int COMPILE_TIME_CONDITION = 6;
  public static final int P1_COMPILE_TIME_CONDITION = 12;
  public static final int DOCUMENTATION_COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\1\1\0\1\2\1\1\22\0\1\2\1\0\1\21"+
    "\1\52\1\0\1\24\1\60\1\20\1\3\1\5\1\4\1\53\1\36"+
    "\1\17\1\15\1\42\1\10\1\71\1\74\1\73\1\75\1\10\1\72"+
    "\1\10\1\70\1\7\1\41\1\44\1\34\1\43\1\35\2\0\1\23"+
    "\1\14\1\11\1\12\1\16\1\26\1\40\1\30\1\25\1\6\1\66"+
    "\1\32\1\56\1\31\1\54\1\64\1\67\1\37\1\33\1\27\1\22"+
    "\1\57\1\65\1\55\1\62\1\6\1\47\1\0\1\50\1\63\1\6"+
    "\1\0\7\6\1\13\22\6\1\45\1\51\1\46\1\61\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\10\1\11\1\12\2\13\3\12\1\14\1\12"+
    "\1\15\2\6\2\12\1\6\6\12\2\6\1\16\2\12"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\3\12\1\32\1\33\1\34\3\12"+
    "\1\2\3\0\1\4\4\0\1\35\1\0\1\36\1\37"+
    "\1\0\1\40\17\12\1\41\3\12\1\0\1\42\1\0"+
    "\1\43\6\12\3\0\1\44\6\12\1\45\7\12\2\46"+
    "\1\47\1\50\1\51\3\12\1\52\1\12\1\53\15\12"+
    "\2\0\1\54\1\0\1\4\1\0\1\4\2\0\2\4"+
    "\3\0\3\55\15\12\1\56\4\12\1\57\1\12\1\60"+
    "\3\12\1\61\1\62\1\63\1\64\7\12\2\0\1\65"+
    "\1\0\1\66\3\12\1\67\7\12\1\70\5\12\4\0"+
    "\10\12\1\71\1\72\3\12\1\73\12\12\2\0\1\4"+
    "\1\0\1\74\2\0\1\4\4\0\1\75\1\12\1\76"+
    "\4\12\1\77\6\12\1\100\3\12\1\101\1\12\1\102"+
    "\5\12\1\103\2\12\1\104\2\0\3\12\1\105\2\106"+
    "\1\12\1\107\1\110\1\111\2\12\1\112\1\113\1\114"+
    "\2\12\2\0\1\115\1\0\1\12\1\116\1\12\1\117"+
    "\1\12\1\120\1\121\2\12\1\122\10\12\1\123\3\12"+
    "\2\0\1\124\3\0\1\4\2\0\1\55\1\12\1\125"+
    "\1\12\1\126\3\12\1\127\1\130\1\12\1\131\1\12"+
    "\1\132\2\12\1\133\1\12\1\134\1\12\1\135\1\136"+
    "\1\12\1\137\1\12\1\140\1\141\1\0\1\142\1\12"+
    "\1\143\2\12\1\0\5\12\1\144\5\0\4\12\1\145"+
    "\1\12\1\146\6\12\1\147\2\12\1\0\1\150\3\0"+
    "\1\5\1\0\5\12\1\151\1\12\1\152\1\153\4\12"+
    "\1\0\1\12\1\154\1\12\1\155\6\12\3\0\1\156"+
    "\1\157\1\160\1\161\1\12\1\162\1\12\1\163\6\12"+
    "\1\0\1\164\3\0\2\5\1\12\1\165\5\12\1\166"+
    "\4\12\1\0\1\167\1\170\2\12\1\171\3\12\2\0"+
    "\1\172\1\12\1\173\2\12\1\174\2\12\1\0\1\175"+
    "\1\5\1\176\3\12\1\177\1\200\1\201\2\12\1\0"+
    "\1\202\3\12\1\203\1\12\1\204\1\12\2\0\1\205"+
    "\3\12\1\5\1\206\4\12\1\207\1\12\1\210\1\0"+
    "\1\211\1\212\1\213\1\12\2\0\1\214\1\215\1\216"+
    "\1\217\1\220\1\221\1\222\1\12\1\0\1\12\2\0"+
    "\1\12\1\223\2\0\1\12\3\0\1\224\6\0\1\141"+
    "\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[559];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\76\0\u0174"+
    "\0\u01b2\0\76\0\76\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8"+
    "\0\u0326\0\u0364\0\u03a2\0\76\0\u03e0\0\u041e\0\u045c\0\u049a"+
    "\0\u04d8\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a"+
    "\0\u06c8\0\76\0\u0706\0\u0744\0\u0782\0\76\0\76\0\76"+
    "\0\76\0\76\0\76\0\76\0\76\0\76\0\76\0\u07c0"+
    "\0\u07fe\0\u083c\0\76\0\76\0\76\0\u087a\0\u08b8\0\u08f6"+
    "\0\u0934\0\u0972\0\u09b0\0\u09ee\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6"+
    "\0\u0b24\0\76\0\u0b62\0\76\0\u0b62\0\u0ba0\0\u0b62\0\u0bde"+
    "\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14\0\u0d52\0\u0d90\0\u0dce"+
    "\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\76\0\u0f80"+
    "\0\u0fbe\0\u0ffc\0\u03e0\0\u103a\0\u041e\0\u1078\0\u10b6\0\u10f4"+
    "\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u01f0"+
    "\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc\0\u141a\0\u01f0\0\u1458"+
    "\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e\0\u15cc\0\76\0\u160a"+
    "\0\76\0\76\0\76\0\u1648\0\u1686\0\u16c4\0\76\0\u1702"+
    "\0\u01f0\0\u1740\0\u177e\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u18b4"+
    "\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u1aa4"+
    "\0\76\0\u1ae2\0\u1b20\0\u1b5e\0\76\0\u1b9c\0\u1bda\0\u1c18"+
    "\0\u1b5e\0\u1c56\0\u1c94\0\u1cd2\0\76\0\u0ba0\0\u1d10\0\u1d4e"+
    "\0\u1d8c\0\u1dca\0\u1e08\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e"+
    "\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u01f0\0\u2074\0\u20b2\0\u20f0"+
    "\0\u212e\0\76\0\u216c\0\u01f0\0\u21aa\0\u21e8\0\u2226\0\76"+
    "\0\76\0\76\0\76\0\u2264\0\u22a2\0\u22e0\0\u231e\0\u235c"+
    "\0\u239a\0\u23d8\0\u2416\0\u2454\0\76\0\u2492\0\76\0\u24d0"+
    "\0\u250e\0\u254c\0\u01f0\0\u258a\0\u25c8\0\u2606\0\u2644\0\u2682"+
    "\0\u26c0\0\u26fe\0\u01f0\0\u273c\0\u277a\0\u27b8\0\u27f6\0\u2834"+
    "\0\u160a\0\u2872\0\u28b0\0\u28ee\0\u292c\0\u296a\0\u29a8\0\u29e6"+
    "\0\u2a24\0\u2a62\0\u2aa0\0\u2ade\0\u01f0\0\76\0\u2b1c\0\u2b5a"+
    "\0\u2b98\0\u01f0\0\u2bd6\0\u2c14\0\u2c52\0\u2c90\0\u2cce\0\u2d0c"+
    "\0\u2d4a\0\u2d88\0\u2dc6\0\u2e04\0\u2e42\0\u2e80\0\u2ebe\0\u2efc"+
    "\0\76\0\u2f3a\0\u2f78\0\u1c94\0\u2fb6\0\u2ff4\0\u3032\0\u3070"+
    "\0\u01f0\0\u30ae\0\u01f0\0\u30ec\0\u312a\0\u3168\0\u31a6\0\76"+
    "\0\u31e4\0\u3222\0\u3260\0\u329e\0\u32dc\0\u331a\0\76\0\u3358"+
    "\0\u3396\0\u33d4\0\u01f0\0\u3412\0\u01f0\0\u3450\0\u348e\0\u34cc"+
    "\0\u350a\0\u3548\0\76\0\u3586\0\u35c4\0\76\0\u3602\0\u3640"+
    "\0\u367e\0\u36bc\0\u36fa\0\u01f0\0\76\0\u01f0\0\u3738\0\u3776"+
    "\0\u01f0\0\76\0\u37b4\0\u37f2\0\76\0\76\0\76\0\u3830"+
    "\0\u386e\0\u38ac\0\u38ea\0\76\0\u3928\0\u3966\0\u01f0\0\u39a4"+
    "\0\76\0\u39e2\0\76\0\76\0\u3a20\0\u3a5e\0\76\0\u3a9c"+
    "\0\u3ada\0\u3b18\0\u3b56\0\u3b94\0\u3bd2\0\u3c10\0\u3c4e\0\u01f0"+
    "\0\u3c8c\0\u3cca\0\u3d08\0\u3d46\0\u3d84\0\76\0\u3dc2\0\u3e00"+
    "\0\u3e3e\0\u3e7c\0\u3eba\0\u3ef8\0\u3032\0\u3f36\0\u01f0\0\u3f74"+
    "\0\u01f0\0\u3fb2\0\u3ff0\0\u402e\0\u01f0\0\76\0\u406c\0\76"+
    "\0\u40aa\0\u01f0\0\u40e8\0\u4126\0\76\0\u4164\0\u01f0\0\u41a2"+
    "\0\u01f0\0\u01f0\0\u41e0\0\u01f0\0\u421e\0\u01f0\0\76\0\u425c"+
    "\0\76\0\u429a\0\u01f0\0\u42d8\0\u4316\0\u4354\0\u4392\0\u43d0"+
    "\0\u440e\0\u444c\0\u448a\0\u01f0\0\u44c8\0\u4506\0\u4544\0\u4582"+
    "\0\u45c0\0\u45fe\0\u463c\0\u467a\0\u46b8\0\u01f0\0\u46f6\0\u01f0"+
    "\0\u4734\0\u4772\0\u47b0\0\u47ee\0\u482c\0\u486a\0\u01f0\0\u48a8"+
    "\0\u48e6\0\u4924\0\76\0\u4962\0\u49a0\0\u49de\0\u4a1c\0\u4a5a"+
    "\0\u4a98\0\u4ad6\0\u4b14\0\u4b52\0\u4b90\0\u4bce\0\u4c0c\0\u01f0"+
    "\0\u01f0\0\u4c4a\0\u4c88\0\u4cc6\0\u4d04\0\u4d42\0\u4d80\0\u01f0"+
    "\0\u4dbe\0\u01f0\0\u4dfc\0\u4e3a\0\u4e78\0\u4eb6\0\u4ef4\0\u4f32"+
    "\0\u4f70\0\u4fae\0\u4fec\0\76\0\u01f0\0\u01f0\0\u01f0\0\u502a"+
    "\0\u01f0\0\u5068\0\u01f0\0\u50a6\0\u50e4\0\u5122\0\u5160\0\u519e"+
    "\0\u51dc\0\u521a\0\76\0\u5258\0\u5296\0\u52d4\0\u5312\0\u5350"+
    "\0\u538e\0\u01f0\0\u53cc\0\u540a\0\u5448\0\u5486\0\u54c4\0\u01f0"+
    "\0\u5502\0\u5540\0\u557e\0\u55bc\0\u55fa\0\u5638\0\u01f0\0\u5676"+
    "\0\u56b4\0\u01f0\0\u56f2\0\u5730\0\u576e\0\u57ac\0\u57ea\0\u01f0"+
    "\0\u5828\0\u01f0\0\u5866\0\u58a4\0\u01f0\0\u58e2\0\u5920\0\u595e"+
    "\0\76\0\u599c\0\u59da\0\u5a18\0\u5a56\0\u5a94\0\u01f0\0\u01f0"+
    "\0\u01f0\0\u5ad2\0\u5b10\0\u5b4e\0\u01f0\0\u5b8c\0\u5bca\0\u5c08"+
    "\0\u01f0\0\u5c46\0\u01f0\0\u5c84\0\u5cc2\0\u5d00\0\u01f0\0\u5d3e"+
    "\0\u5d7c\0\u5dba\0\u5df8\0\u01f0\0\u5e36\0\u5e74\0\u5eb2\0\u5ef0"+
    "\0\u01f0\0\u5f2e\0\u01f0\0\u5f6c\0\u01f0\0\u01f0\0\u01f0\0\u5faa"+
    "\0\u5fe8\0\u6026\0\u01f0\0\u01f0\0\u01f0\0\u01f0\0\u01f0\0\u01f0"+
    "\0\u01f0\0\u6064\0\u60a2\0\u60e0\0\u611e\0\u615c\0\u619a\0\u01f0"+
    "\0\u61d8\0\u6216\0\u6254\0\u6292\0\u62d0\0\u630e\0\u01f0\0\u634c"+
    "\0\u638a\0\u63c8\0\u6406\0\u6444\0\u6482\0\u5cc2\0\u64c0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[559];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\2\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\14\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\14"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\14\1\61\1\62\1\63"+
    "\1\64\1\14\1\65\1\66\1\67\1\14\1\70\1\15"+
    "\5\16\76\0\3\71\1\72\1\73\71\71\24\4\1\74"+
    "\51\4\24\75\1\76\2\75\1\77\4\75\1\100\41\75"+
    "\27\6\1\101\46\6\1\0\2\10\77\0\1\102\77\0"+
    "\7\14\1\0\1\14\3\0\2\14\1\0\7\14\3\0"+
    "\2\14\13\0\4\14\2\0\1\14\1\0\12\14\7\0"+
    "\2\15\2\103\1\104\1\105\1\106\1\103\4\0\1\103"+
    "\2\0\1\103\1\0\1\104\37\0\6\15\7\0\1\15"+
    "\1\16\1\107\1\103\1\104\1\105\1\106\1\103\4\0"+
    "\1\103\2\0\1\103\1\0\1\104\37\0\1\15\5\16"+
    "\6\0\7\14\1\0\1\14\3\0\1\14\1\110\1\0"+
    "\3\14\1\111\3\14\3\0\2\14\13\0\1\112\1\14"+
    "\1\113\1\14\2\0\1\14\1\0\12\14\6\0\7\14"+
    "\1\0\1\114\3\0\2\14\1\0\1\115\4\14\1\116"+
    "\1\14\3\0\2\14\13\0\4\14\2\0\1\14\1\0"+
    "\1\14\1\117\10\14\6\0\7\14\1\0\1\120\3\0"+
    "\1\14\1\121\1\0\1\122\3\14\1\123\2\14\3\0"+
    "\2\14\13\0\1\124\1\125\2\14\2\0\1\126\1\0"+
    "\12\14\15\0\1\127\66\0\7\14\1\0\1\14\3\0"+
    "\2\14\1\0\4\14\1\130\1\131\1\14\3\0\2\14"+
    "\13\0\1\14\1\132\2\14\2\0\1\14\1\0\12\14"+
    "\20\133\1\134\55\133\21\135\1\136\54\135\6\0\3\14"+
    "\1\137\3\14\1\0\1\14\3\0\2\14\1\0\4\14"+
    "\1\140\2\14\3\0\2\14\13\0\4\14\2\0\1\14"+
    "\1\0\12\14\6\0\3\14\1\141\3\14\1\0\1\14"+
    "\3\0\2\14\1\0\4\14\1\142\1\14\1\143\3\0"+
    "\1\144\1\14\13\0\4\14\2\0\1\14\1\0\12\14"+
    "\16\0\1\145\6\0\1\146\1\0\1\147\54\0\7\14"+
    "\1\0\1\14\3\0\2\14\1\0\1\14\1\150\2\14"+
    "\1\151\2\14\3\0\2\14\13\0\2\14\1\152\1\14"+
    "\2\0\1\14\1\0\12\14\6\0\7\14\1\0\1\14"+
    "\3\0\1\14\1\153\1\0\7\14\3\0\1\154\1\14"+
    "\13\0\1\155\3\14\2\0\1\14\1\0\12\14\6\0"+
    "\7\14\1\0\1\14\3\0\2\14\1\0\3\14\1\156"+
    "\3\14\3\0\2\14\13\0\1\157\3\14\2\0\1\160"+
    "\1\0\12\14\6\0\7\14\1\0\1\14\3\0\2\14"+
    "\1\0\7\14\3\0\2\14\13\0\1\161\3\14\2\0"+
    "\1\14\1\0\12\14\6\0\7\14\1\0\1\14\3\0"+
    "\2\14\1\0\7\14\3\0\2\14\13\0\1\162\3\14"+
    "\2\0\1\14\1\0\12\14\6\0\7\14\1\0\1\163"+
    "\3\0\1\14\1\164\1\0\3\14\1\165\3\14\3\0"+
    "\2\14\13\0\2\14\1\166\1\14\2\0\1\14\1\0"+
    "\12\14\4\167\1\170\30\167\1\56\5\167\1\171\32\167"+
    "\43\172\1\173\32\172\6\0\7\14\1\0\1\174\3\0"+
    "\2\14\1\0\7\14\3\0\2\14\13\0\1\175\3\14"+
    "\2\0\1\14\1\0\12\14\6\0\7\14\1\0\1\176"+
    "\3\0\2\14\1\0\7\14\3\0\2\14\13\0\4\14"+
    "\2\0\1\14\1\0\12\14\43\0\1\177\40\0\7\14"+
    "\1\0\1\14\3\0\1\200\1\14\1\0\1\14\1\201"+
    "\5\14\3\0\1\202\1\14\13\0\4\14\2\0\1\14"+
    "\1\0\12\14\6\0\7\14\1\0\1\14\3\0\1\14"+
    "\1\203\1\0\7\14\3\0\2\14\13\0\1\204\3\14"+
    "\2\0\1\14\1\0\12\14\6\0\7\14\1\0\1\14"+
    "\3\0\1\14\1\205\1\0\7\14\3\0\2\14\13\0"+
    "\1\206\3\14\2\0\1\14\1\0\12\14\6\0\7\14"+
    "\1\0\1\14\3\0\1\207\1\210\1\0\7\14\3\0"+
    "\1\211\1\14\13\0\1\212\3\14\2\0\1\14\1\0"+
    "\12\14\6\0\7\14\1\0\1\14\3\0\2\14\1\0"+
    "\1\213\2\14\1\214\3\14\3\0\2\14\13\0\1\215"+
    "\3\14\2\0\1\14\1\0\12\14\6\0\7\14\1\0"+
    "\1\14\3\0\1\216\1\14\1\0\7\14\3\0\2\14"+
    "\13\0\4\14\2\0\1\14\1\0\12\14\3\71\1\217"+
    "\1\220\74\71\1\217\1\102\75\71\1\73\1\221\70\71"+
    "\27\4\1\222\46\4\24\223\1\0\2\223\1\224\4\223"+
    "\1\0\41\223\16\225\1\226\6\225\1\227\1\225\1\230"+
    "\75\225\1\231\1\232\51\225\1\233\22\225\1\231\46\225"+
    "\30\6\1\234\45\6\7\0\4\103\1\104\1\103\1\0"+
    "\1\103\4\0\1\103\2\0\1\103\1\0\1\104\37\0"+
    "\6\103\7\235\2\236\4\235\1\0\1\237\51\235\6\236"+
    "\6\0\7\14\1\0\1\14\3\0\2\14\1\0\6\14"+
    "\1\240\3\0\1\241\1\14\13\0\4\14\2\0\1\14"+
    "\1\0\12\14\6\0\7\14\1\0\1\14\3\0\1\14"+
    "\1\242\1\0\7\14\3\0\2\14\13\0\4\14\2\0"+
    "\1\14\1\0\12\14\6\0\7\14\1\0\1\14\3\0"+
    "\2\14\1\0\4\14\1\243\2\14\3\0\2\14\13\0"+
    "\2\14\1\244\1\14\2\0\1\14\1\0\12\14\6\0"+
    "\7\14\1\0\1\14\3\0\2\14\1\0\7\14\3\0"+
    "\2\14\13\0\4\14\2\0\1\14\1\0\1\245\11\14"+
    "\6\0\7\14\1\0\1\14\3\0\2\14\1\0\1\14"+
    "\1\246\5\14\3\0\2\14\13\0\4\14\2\0\1\14"+
    "\1\0\12\14\6\0\7\14\1\0\1\14\3\0\2\14"+
    "\1\0\7\14\3\0\2\14\13\0\3\14\1\247\2\0"+
    "\1\14\1\0\12\14\6\0\7\14\1\0\1\14\3\0"+
    "\2\14\1\0\5\14\1\250\1\14\3\0\2\14\13\0"+
    "\4\14\2\0\1\14\1\0\12\14\6\0\7\14\1\0"+
    "\1\14\3\0\2\14\1\0\7\14\3\0\2\14\13\0"+
    "\1\251\3\14\2\0\1\14\1\0\12\14\6\0\7\14"+
    "\1\0\1\14\3\0\2\14\1\0\7\14\3\0\1\14"+
    "\1\252\13\0\4\14\2\0\1\14\1\0\12\14\6\0"+
    "\7\14\1\0\1\14\3\0\2\14\1\0\4\14\1\253"+
    "\2\14\3\0\2\14\13\0\4\14\2\0\1\14\1\0"+
    "\12\14\6\0\7\14\1\0\1\14\3\0\2\14\1\0"+
    "\2\14\1\254\4\14\3\0\1\14\1\255\13\0\4\14"+
    "\2\0\1\14\1\0\12\14\6\0\7\14\1\0\1\14"+
    "\3\0\2\14\1\0\7\14\3\0\2\14\13\0\1\256"+
    "\3\14\2\0\1\14\1\0\12\14\6\0\7\14\1\0"+
    "\1\14\3\0\2\14\1\0\7\14\3\0\1\257\1\14"+
    "\13\0\1\260\3\14\2\0\1\14\1\0\12\14\6\0"+
    "\7\14\1\0\1\14\3\0\2\14\1\0\7\14\3\0"+
    "\2\14\13\0\1\261\3\14\2\0\1\14\1\0\12\14"+
    "\6\262\7\14\1\262\1\14\3\262\2\14\1\262\2\14"+
    "\1\263\4\14\3\262\2\14\13\262\4\14\2\262\1\14"+
    "\1\262\12\14\6\0\4\14\1\264\2\14\1\0\1\14"+
    "\3\0\2\14\1\0\7\14\3\0\2\14\13\0\4\14"+
    "\2\0\1\14\1\0\12\14\6\0\7\14\1\0\1\14"+
    "\3\0\2\14\1\0\6\14\1\265\3\0\2\14\13\0"+
    "\4\14\2\0\1\14\1\0\12\14\6\0\7\14\1\0"+
    "\1\14\3\0\2\14\1\0\1\266\1\14\1\267\4\14"+
    "\3\0\2\14\13\0\4\14\2\0\1\14\1\0\12\14"+
    "\22\0\1\270\1\271\74\0\1\272\1\273\60\0\7\14"+
    "\1\0\1\14\3\0\2\14\1\0\3\14\1\274\3\14"+
    "\3\0\2\14\13\0\4\14\2\0\1\14\1\0\12\14"+
    "\6\0\7\14\1\0\1\14\3\0\2\14\1\0\2\14"+
    "\1\275\3\14\1\276\3\0\2\14\13\0\4\14\2\0"+
    "\1\14\1\0\12\14\6\0\7\14\1\0\1\14\3\0"+
    "\2\14\1\0\3\14\1\277\3\14\3\0\2\14\13\0"+
    "\4\14\2\0\1\14\1\0\12\14\6\0\4\14\1\300"+
    "\2\14\1\0\1\14\3\0\2\14\1\0\7\14\3\0"+
    "\2\14\13\0\4\14\2\0\1\14\1\0\12\14\6\0"+
    "\7\14\1\0\1\14\3\0\2\14\1\0\6\14\1\301"+
    "\3\0\2\14\13\0\4\14\2\0\1\14\1\0\12\14"+
    "\6\0\7\14\1\0\1\14\3\0\2\14\1\0\7\14"+
    "\3\0\1\302\1\14\13\0\4\14\2\0\1\14\1\0"+
    "\12\14\31\0\1\303\1\304\71\0\1\305\77\0\1\306"+
    "\45\0\6\307\7\14\1\307\1\14\3\307\2\14\1\307"+
    "\2\14\1\310\4\14\3\307\2\14\13\307\1\311\3\14"+
    "\2\307\1\14\1\307\12\14\6\0\7\14\1\0\1\14"+
    "\3\0\2\14\1\0\7\14\3\0\2\14\13\0\4\14"+
    "\2\0\1\14\1\0\1\312\11\14\6\0\7\14\1\0"+
    "\1\14\3\0\2\14\1\0\7\14\3\0\1\313\1\14"+
    "\13\0\4\14\2\0\1\14\1\0\12\14\6\0\7\14"+
    "\1\0\1\14\3\0\2\14\1\0\7\14\3\0\2\14"+
    "\13\0\1\314\3\14\2\0\1\14\1\0\12\14\6\0"+
    "\7\14\1\0\1\14\3\0\2\14\1\0\7\14\3\0"+
    "\1\315\1\14\13\0\4\14\2\0\1\14\1\0\12\14"+
    "\6\0\7\14\1\0\1\316\3\0\2\14\1\0\7\14"+
    "\3\0\2\14\13\0\4\14\2\0\1\14\1\0\12\14"+
    "\6\0\7\14\1\0\1\14\3\0\2\14\1\0\7\14"+
    "\3\0\2\14\13\0\4\14\2\0\1\14\1\0\1\317"+
    "\11\14\6\0\7\14\1\0\1\14\3\0\2\14\1\0"+
    "\2\14\1\320\1\321\3\14\3\0\2\14\13\0\4\14"+
    "\2\0\1\14\1\0\12\14\6\0\7\14\1\0\1\14"+
    "\3\0\2\14\1\0\4\14\1\322\2\14\3\0\2\14"+
    "\13\0\4\14\2\0\1\14\1\0\12\14\6\0\7\14"+
    "\1\0\1\14\3\0\2\14\1\0\2\14\1\323\4\14"+
    "\3\0\2\14\13\0\4\14\2\0\1\14\1\0\12\14"+
    "\6\0\7\14\1\0\1\14\3\0\2\14\1\0\7\14"+
    "\3\0\1\324\1\14\13\0\4\14\2\0\1\14\1\0"+
    "\12\14\6\0\7\14\1\0\1\14\3\0\2\14\1\0"+
    "\5\14\1\325\1\14\3\0\1\326\1\14\13\0\1\327"+
    "\3\14\2\0\1\14\1\0\12\14\6\0\7\14\1\0"+
    "\1\14\3\0\1\14\1\330\1\0\7\14\3\0\2\14"+
    "\13\0\4\14\2\0\1\14\1\0\12\14\2\0\1\331"+
    "\13\0\1\332\6\0\1\333\14\0\1\334\41\0\3\14"+
    "\1\335\3\14\1\0\1\14\3\0\1\14\1\336\1\0"+
    "\2\14\1\337\4\14\3\0\2\14\13\0\2\14\1\340"+
    "\1\14\2\0\1\14\1\0\1\341\11\14\6\0\7\14"+
    "\1\0\1\14\3\0\2\14\1\0\5\14\1\342\1\14"+
    "\3\0\1\343\1\14\13\0\4\14\2\0\1\14\1\0"+
    "\12\14\6\0\7\14\1\0\1\14\3\0\2\14\1\0"+
    "\4\14\1\344\2\14\3\0\2\14\13\0\4\14\2\0"+
    "\1\14\1\0\12\14\6\0\7\14\1\0\1\14\3\0"+
    "\2\14\1\0\2\14\1\345\4\14\3\0\2\14\13\0"+
    "\4\14\2\0\1\14\1\0\12\14\6\346\7\14\1\346"+
    "\1\14\3\346\2\14\1\346\7\14\3\346\2\14\13\346"+
    "\4\14\2\346\1\14\1\346\12\14\6\0\3\14\1\347"+
    "\3\14\1\0\1\14\3\0\2\14\1\0\7\14\3\0"+
    "\2\14\13\0\4\14\2\0\1\14\1\0\12\14\6\0"+
    "\4\14\1\350\2\14\1\0\1\14\3\0\2\14\1\0"+
    "\7\14\3\0\2\14\13\0\4\14\2\0\1\14\1\0"+
    "\12\14\6\0\7\14\1\0\1\14\3\0\2\14\1\0"+
    "\5\14\1\351\1\14\3\0\1\352\1\14\13\0\4\14"+
    "\2\0\1\14\1\0\12\14\6\0\7\14\1\0\1\14"+
    "\3\0\2\14\1\0\5\14\1\353\1\14\3\0\2\14"+
    "\13\0\4\14\2\0\1\14\1\0\12\14\6\0\6\14"+
    "\1\354\1\0\1\14\3\0\2\14\1\0\7\14\3\0"+
    "\1\355\1\14\13\0\4\14\2\0\1\14\1\0\12\14"+
    "\6\0\3\14\1\356\3\14\1\0\1\14\3\0\2\14"+
    "\1\0\7\14\3\0\2\14\13\0\4\14\2\0\1\14"+
    "\1\0\12\14\6\0\7\14\1\0\1\14\3\0\2\14"+
    "\1\0\7\14\3\0\2\14\13\0\1\357\3\14\2\0"+
    "\1\14\1\0\12\14\6\0\7\14\1\0\1\14\3\0"+
    "\2\14\1\0\1\360\6\14\3\0\2\14\13\0\4\14"+
    "\2\0\1\14\1\0\12\14\6\0\7\14\1\0\1\14"+
    "\3\0\2\14\1\0\2\14\1\361\4\14\3\0\2\14"+
    "\13\0\4\14\2\0\1\14\1\0\12\14\6\0\7\14"+
    "\1\0\1\14\3\0\2\14\1\0\1\362\6\14\3\0"+
    "\2\14\13\0\4\14\2\0\1\14\1\0\12\14\6\0"+
    "\7\14\1\0\1\14\3\0\2\14\1\0\7\14\3\0"+
    "\1\363\1\14\13\0\4\14\2\0\1\14\1\0\12\14"+
    "\6\0\7\14\1\0\1\14\3\0\1\14\1\364\1\0"+
    "\7\14\3\0\2\14\13\0\4\14\2\0\1\14\1\0"+
    "\12\14\3\71\1\217\1\0\75\71\1\220\1\0\70\71"+
    "\30\4\1\365\45\4\24\223\1\0\2\223\1\0\4\223"+
    "\1\0\41\223\30\0\1\366\45\0\31\225\1\367\1\370"+
    "\71\225\1\371\77\225\1\372\63\225\1\373\61\225\1\374"+
    "\13\225\1\375\6\225\1\227\50\225\16\6\1\376\57\6"+
    "\7\0\2\377\6\0\1\u0100\33\0\1\u0100\14\0\6\377"+
    "\6\0\7\14\1\0\1\u0101\3\0\2\14\1\0\7\14"+
    "\3\0\2\14\13\0\4\14\2\0\1\14\1\0\12\14"+
    "\6\0\4\14\1\u0102\2\14\1\0\1\14\3\0\2\14"+
    "\1\0\7\14\3\0\2\14\13\0\4\14\2\0\1\14"+
    "\1\0\12\14\6\0\7\14\1\0\1\14\3\0\2\14"+
    "\1\0\7\14\3\0\1\u0103\1\14\13\0\4\14\2\0"+
    "\1\14\1\0\12\14\6\0\7\14\1\0\1\14\3\0"+
    "\2\14\1\0\6\14\1\u0104\3\0\2\14\13\0\4\14"+
    "\2\0\1\14\1\0\12\14\6\0\7\14\1\0\1\14"+
    "\3\0\2\14\1\0\7\14\3\0\2\14\13\0\4\14"+
    "\2\0\1\14\1\0\1\u0105\11\14\6\0\7\14\1\0"+
    "\1\14\3\0\2\14\1\0\5\14\1\u0106\1\14\3\0"+
    "\2\14\13\0\4\14\2\0\1\14\1\0\12\14\6\0"+
    "\7\14\1\0\1\14\3\0\2\14\1\0\1\u0107\6\14"+
    "\3\0\2\14\13\0\4\14\2\0\1\14\1\0\12\14"+
    "\6\u0108\7\14\1\u0108\1\14\3\u0108\2\14\1\u0108\7\14"+
    "\3\u0108\2\14\13\u0108\4\14\2\u0108\1\14\1\u0108\12\14"+
    "\6\0\7\14\1\0\1\14\3\0\1\14\1\u0109\1\0"+
    "\7\14\3\0\2\14\13\0\4\14\2\0\1\14\1\0"+
    "\12\14\6\0\7\14\1\0\1\14\3\0\2\14\1\0"+
    "\7\14\3\0\1\u010a\1\14\13\0\4\14\2\0\1\14"+
    "\1\0\12\14\6\0\7\14\1\0\1\14\3\0\2\14"+
    "\1\0\1\u010b\6\14\3\0\2\14\13\0\4\14\2\0"+
    "\1\14\1\0\12\14\6\0\4\14\1\u010c\2\14\1\0"+
    "\1\14\3\0\2\14\1\0\7\14\3\0\2\14\13\0"+
    "\4\14\2\0\1\14\1\0\12\14\6\0\7\14\1\0"+
    "\1\14\3\0\2\14\1\0\6\14\1\u010d\3\0\2\14"+
    "\13\0\4\14\2\0\1\14\1\0\12\14\6\0\7\14"+
    "\1\0\1\14\3\0\2\14\1\0\2\14\1\u010e\4\14"+
    "\3\0\2\14\13\0\4\14\2\0\1\14\1\0\12\14"+
    "\6\u010f\7\14\1\u010f\1\14\3\u010f\2\14\1\u010f\7\14"+
    "\3\u010f\2\14\13\u010f\4\14\2\u010f\1\14\1\u010f\12\14"+
    "\6\0\7\14\1\0\1\14\3\0\2\14\1\0\5\14"+
    "\1\u0110\1\14\3\0\2\14\13\0\4\14\2\0\1\14"+
    "\1\0\12\14\6\0\7\14\1\0\1\14\3\0\2\14"+
    "\1\0\7\14\3\0\1\u0111\1\14\13\0\4\14\2\0"+
    "\1\14\1\0\12\14\6\0\7\14\1\0\1\u0112\3\0"+
    "\2\14\1\0\7\14\3\0\2\14\13\0\4\14\2\0"+
    "\1\14\1\0\12\14\6\0\7\14\1\0\1\u0113\3\0"+
    "\2\14\1\0\1\u0114\6\14\3\0\2\14\13\0\4\14"+
    "\2\0\1\14\1\0\12\14\6\0\7\14\1\0\1\14"+
    "\3\0\2\14\1\0\2\14\1\u0115\4\14\3\0\2\14"+
    "\13\0\4\14\2\0\1\14\1\0\12\14\6\0\7\14"+
    "\1\0\1\u0116\3\0\2\14\1\0\7\14\3\0\2\14"+
    "\13\0\4\14\2\0\1\14\1\0\12\14\6\0\7\14"+
    "\1\0\1\14\3\0\1\14\1\u0117\1\0\7\14\3\0"+
    "\2\14\13\0\4\14\2\0\1\14\1\0\12\14\6\0"+
    "\7\14\1\0\1\14\3\0\2\14\1\0\1\u0118\6\14"+
    "\3\0\2\14\13\0\4\14\2\0\1\14\1\0\12\14"+
    "\6\0\7\14\1\0\1\14\3\0\1\14\1\u0119\1\0"+
    "\7\14\3\0\2\14\13\0\4\14\2\0\1\14\1\0"+
    "\12\14\6\0\7\14\1\0\1\14\3\0\1\14\1\u011a"+
    "\1\0\7\14\3\0\2\14\13\0\4\14\2\0\1\14"+
    "\1\0\12\14\6\u011b\7\14\1\u011b\1\14\3\u011b\2\14"+
    "\1\u011b\7\14\3\u011b\2\14\13\u011b\4\14\2\u011b\1\14"+
    "\1\u011b\12\14\6\0\7\14\1\0\1\u011c\3\0\2\14"+
    "\1\0\7\14\3\0\2\14\13\0\4\14\2\0\1\14"+
    "\1\0\12\14\6\0\7\14\1\0\1\14\3\0\1\14"+
    "\1\u011d\1\0\7\14\3\0\2\14\13\0\4\14\2\0"+
    "\1\14\1\0\12\14\12\0\1\u011e\116\0\1\u011f\60\0"+
    "\1\u0120\65\0\7\14\1\0\1\u0121\3\0\2\14\1\0"+
    "\7\14\3\0\2\14\13\0\4\14\2\0\1\14\1\0"+
    "\12\14\6\0\7\14\1\0\1\14\3\0\1\u0122\1\14"+
    "\1\0\7\14\3\0\2\14\13\0\4\14\2\0\1\14"+
    "\1\0\12\14\6\0\7\14\1\0\1\14\3\0\2\14"+
    "\1\0\7\14\3\0\2\14\13\0\1\u0123\3\14\2\0"+
    "\1\14\1\0\12\14\6\0\7\14\1\0\1\14\3\0"+
    "\2\14\1\0\7\14\3\0\2\14\13\0\2\14\1\u0124"+
    "\1\14\2\0\1\14\1\0\12\14\6\u0125\7\u0126\1\u0125"+
    "\1\u0126\3\u0125\2\u0126\1\u0125\7\u0126\3\u0125\2\u0126\13\u0125"+
    "\4\u0126\2\u0125\1\u0126\1\u0125\1\u0126\1\u0127\10\u0126\6\0"+
    "\7\14\1\0\1\14\3\0\2\14\1\0\4\14\1\u0128"+
    "\2\14\3\0\2\14\13\0\4\14\2\0\1\14\1\0"+
    "\12\14\6\0\7\14\1\0\1\u0129\3\0\2\14\1\0"+
    "\7\14\3\0\2\14\13\0\4\14\2\0\1\14\1\0"+
    "\12\14\6\u012a\7\14\1\u012a\1\14\3\u012a\2\14\1\u012a"+
    "\7\14\3\u012a\2\14\13\u012a\4\14\2\u012a\1\14\1\u012a"+
    "\12\14\6\0\7\14\1\0\1\14\3\0\2\14\1\0"+
    "\1\u012b\6\14\3\0\2\14\13\0\4\14\2\0\1\14"+
    "\1\0\12\14\6\0\7\14\1\0\1\14\3\0\2\14"+
    "\1\0\7\14\3\0\1\14\1\u012c\13\0\4\14\2\0"+
    "\1\14\1\0\12\14\6\u012d\7\14\1\u012d\1\14\3\u012d"+
    "\2\14\1\u012d\7\14\3\u012d\2\14\13\u012d\4\14\2\u012d"+
    "\1\14\1\u012d\12\14\6\u012e\7\14\1\u012e\1\14\3\u012e"+
    "\2\14\1\u012e\7\14\3\u012e\2\14\13\u012e\4\14\2\u012e"+
    "\1\14\1\u012e\12\14\6\u012f\7\14\1\u012f\1\14\3\u012f"+
    "\2\14\1\u012f\7\14\3\u012f\2\14\13\u012f\4\14\2\u012f"+
    "\1\14\1\u012f\12\14\6\0\7\14\1\0\1\14\3\0"+
    "\2\14\1\0\7\14\3\0\1\u0130\1\14\13\0\4\14"+
    "\2\0\1\14\1\0\12\14\6\0\7\14\1\0\1\14"+
    "\3\0\2\14\1\0\5\14\1\u0131\1\14\3\0\2\14"+
    "\13\0\4\14\2\0\1\14\1\0\12\14\31\0\1\u0132"+
    "\1\u0133\71\0\1\u0134\55\0\1\u0135\2\0\4\u0135\1\0"+
    "\1\u0135\3\0\2\u0135\1\0\7\u0135\3\0\2\u0135\13\0"+
    "\4\u0135\2\0\1\u0135\1\0\4\u0135\14\0\7\14\1\0"+
    "\1\14\3\0\2\14\1\0\7\14\3\0\2\14\13\0"+
    "\1\u0136\3\14\2\0\1\14\1\0\12\14\6\0\7\14"+
    "\1\0\1\14\3\0\2\14\1\0\5\14\1\u0137\1\14"+
    "\3\0\2\14\13\0\4\14\2\0\1\14\1\0\12\14"+
    "\6\0\7\14\1\0\1\14\3\0\1\u0138\1\14\1\0"+
    "\7\14\3\0\2\14\13\0\4\14\2\0\1\14\1\0"+
    "\12\14\6\u0139\7\14\1\u0139\1\14\3\u0139\2\14\1\u0139"+
    "\7\14\3\u0139\2\14\13\u0139\4\14\2\u0139\1\14\1\u0139"+
    "\12\14\6\0\7\14\1\0\1\u013a\3\0\2\14\1\0"+
    "\7\14\3\0\2\14\13\0\4\14\2\0\1\14\1\0"+
    "\12\14\6\u013b\7\14\1\u013b\1\14\3\u013b\2\14\1\u013b"+
    "\7\14\3\u013b\2\14\13\u013b\4\14\2\u013b\1\14\1\u013b"+
    "\12\14\6\u013c\7\14\1\u013c\1\14\3\u013c\2\14\1\u013c"+
    "\7\14\3\u013c\2\14\13\u013c\4\14\2\u013c\1\14\1\u013c"+
    "\12\14\6\0\7\14\1\0\1\u013d\3\0\2\14\1\0"+
    "\7\14\3\0\2\14\13\0\4\14\2\0\1\14\1\0"+
    "\12\14\6\0\7\14\1\0\1\14\3\0\2\14\1\0"+
    "\7\14\3\0\1\u013e\1\14\13\0\4\14\2\0\1\14"+
    "\1\0\12\14\6\u013f\7\14\1\u013f\1\14\3\u013f\1\u0140"+
    "\1\14\1\u013f\7\14\3\u013f\2\14\13\u013f\4\14\2\u013f"+
    "\1\14\1\u013f\12\14\6\0\7\14\1\0\1\14\3\0"+
    "\1\u0141\1\14\1\0\7\14\3\0\2\14\13\0\4\14"+
    "\2\0\1\14\1\0\12\14\6\0\7\14\1\0\1\14"+
    "\3\0\1\14\1\u0142\1\0\7\14\3\0\2\14\13\0"+
    "\4\14\2\0\1\14\1\0\12\14\6\0\7\14\1\0"+
    "\1\14\3\0\2\14\1\0\5\14\1\u0143\1\14\3\0"+
    "\2\14\13\0\4\14\2\0\1\14\1\0\12\14\6\0"+
    "\7\14\1\0\1\u0144\3\0\2\14\1\0\7\14\3\0"+
    "\2\14\13\0\4\14\2\0\1\14\1\0\12\14\6\0"+
    "\7\14\1\0\1\14\3\0\2\14\1\0\7\14\3\0"+
    "\2\14\13\0\4\14\2\0\1\14\1\0\2\14\1\u0145"+
    "\7\14\6\0\3\14\1\u0146\3\14\1\0\1\14\3\0"+
    "\2\14\1\0\7\14\3\0\2\14\13\0\4\14\2\0"+
    "\1\14\1\0\12\14\6\0\7\14\1\0\1\14\3\0"+
    "\2\14\1\0\4\14\1\u0147\2\14\3\0\2\14\13\0"+
    "\4\14\2\0\1\14\1\0\12\14\6\0\7\14\1\0"+
    "\1\14\3\0\2\14\1\0\3\14\1\u0148\3\14\3\0"+
    "\2\14\13\0\4\14\2\0\1\14\1\0\12\14\6\0"+
    "\7\14\1\0\1\14\3\0\2\14\1\0\5\14\1\u0149"+
    "\1\14\3\0\2\14\13\0\4\14\2\0\1\14\1\0"+
    "\12\14\6\0\4\14\1\u014a\2\14\1\0\1\14\3\0"+
    "\2\14\1\0\7\14\3\0\2\14\13\0\4\14\2\0"+
    "\1\14\1\0\12\14\6\0\7\14\1\0\1\14\3\0"+
    "\2\14\1\0\5\14\1\u014b\1\14\3\0\2\14\13\0"+
    "\4\14\2\0\1\14\1\0\12\14\16\4\1\u014c\57\4"+
    "\16\0\1\u014d\71\0\1\u014e\63\0\33\225\1\u014f\60\225"+
    "\1\u0150\110\225\1\u0151\75\225\1\u0152\1\u0153\43\225\31\6"+
    "\1\u0154\44\6\7\235\2\u0155\4\235\1\0\52\235\6\u0155"+
    "\7\0\2\377\57\0\6\377\6\0\7\14\1\0\1\14"+
    "\3\0\2\14\1\0\1\u0156\6\14\3\0\2\14\13\0"+
    "\4\14\2\0\1\14\1\0\12\14\6\0\7\14\1\0"+
    "\1\14\3\0\2\14\1\0\2\14\1\u0157\4\14\3\0"+
    "\2\14\13\0\4\14\2\0\1\14\1\0\12\14\6\0"+
    "\7\14\1\0\1\14\3\0\2\14\1\0\5\14\1\u0158"+
    "\1\14\3\0\2\14\13\0\4\14\2\0\1\14\1\0"+
    "\12\14\6\0\7\14\1\0\1\14\3\0\2\14\1\0"+
    "\7\14\3\0\2\14\13\0\1\14\1\u0159\2\14\2\0"+
    "\1\14\1\0\12\14\6\0\7\14\1\0\1\14\3\0"+
    "\2\14\1\0\4\14\1\u015a\2\14\3\0\2\14\13\0"+
    "\4\14\2\0\1\14\1\0\12\14\6\0\3\14\1\u015b"+
    "\3\14\1\0\1\14\3\0\2\14\1\0\7\14\3\0"+
    "\2\14\13\0\4\14\2\0\1\14\1\0\12\14\6\0"+
    "\4\14\1\u015c\2\14\1\0\1\14\3\0\2\14\1\0"+
    "\7\14\3\0\2\14\13\0\4\14\2\0\1\14\1\0"+
    "\12\14\6\0\7\14\1\0\1\14\3\0\2\14\1\0"+
    "\4\14\1\u015d\2\14\3\0\2\14\13\0\4\14\2\0"+
    "\1\14\1\0\12\14\6\u015e\7\14\1\u015e\1\14\3\u015e"+
    "\2\14\1\u015e\7\14\3\u015e\2\14\13\u015e\4\14\2\u015e"+
    "\1\14\1\u015e\12\14\6\0\7\14\1\0\1\u015f\3\0"+
    "\2\14\1\0\7\14\3\0\2\14\13\0\4\14\2\0"+
    "\1\14\1\0\12\14\6\u0160\7\14\1\u0160\1\14\3\u0160"+
    "\2\14\1\u0160\7\14\3\u0160\2\14\13\u0160\4\14\2\u0160"+
    "\1\14\1\u0160\12\14\6\0\7\14\1\0\1\u0161\3\0"+
    "\2\14\1\0\7\14\3\0\2\14\13\0\4\14\2\0"+
    "\1\14\1\0\4\14\1\u0162\1\u0163\1\14\1\u0164\2\14"+
    "\6\u0165\7\14\1\u0165\1\14\3\u0165\2\14\1\u0165\7\14"+
    "\3\u0165\2\14\13\u0165\4\14\2\u0165\1\14\1\u0165\12\14"+
    "\6\0\6\14\1\u0166\1\0\1\14\3\0\2\14\1\0"+
    "\7\14\3\0\2\14\13\0\4\14\2\0\1\14\1\0"+
    "\12\14\6\0\7\14\1\0\1\14\3\0\2\14\1\0"+
    "\1\14\1\u0167\5\14\3\0\2\14\13\0\4\14\2\0"+
    "\1\14\1\0\12\14\6\0\7\14\1\0\1\14\3\0"+
    "\2\14\1\0\7\14\3\0\1\u0168\1\14\13\0\4\14"+
    "\2\0\1\14\1\0\12\14\6\0\7\14\1\0\1\14"+
    "\3\0\2\14\1\0\7\14\3\0\1\u0169\1\14\13\0"+
    "\4\14\2\0\1\14\1\0\12\14\6\0\7\14\1\0"+
    "\1\14\3\0\2\14\1\0\5\14\1\u016a\1\14\3\0"+
    "\2\14\13\0\4\14\2\0\1\14\1\0\12\14\6\0"+
    "\7\14\1\0\1\14\3\0\2\14\1\0\1\14\1\u016b"+
    "\5\14\3\0\2\14\13\0\4\14\2\0\1\14\1\0"+
    "\12\14\6\0\7\14\1\0\1\14\3\0\2\14\1\0"+
    "\7\14\3\0\1\u016c\1\14\13\0\4\14\2\0\1\14"+
    "\1\0\12\14\6\0\7\14\1\0\1\14\3\0\2\14"+
    "\1\0\7\14\3\0\2\14\13\0\2\14\1\u016d\1\14"+
    "\2\0\1\14\1\0\12\14\6\0\7\14\1\0\1\14"+
    "\3\0\2\14\1\0\7\14\3\0\2\14\13\0\4\14"+
    "\2\0\1\u016e\1\0\12\14\16\0\1\u016f\6\0\1\u0170"+
    "\101\0\1\u0171\52\0\7\14\1\0\1\14\3\0\2\14"+
    "\1\0\7\14\3\0\1\14\1\u0172\13\0\4\14\2\0"+
    "\1\14\1\0\12\14\6\0\7\14\1\0\1\14\3\0"+
    "\2\14\1\0\2\14\1\u0173\4\14\3\0\2\14\13\0"+
    "\4\14\2\0\1\14\1\0\12\14\6\0\7\14\1\0"+
    "\1\14\3\0\2\14\1\0\7\14\3\0\1\u0174\1\14"+
    "\13\0\4\14\2\0\1\14\1\0\12\14\6\0\7\14"+
    "\1\0\1\14\3\0\1\14\1\u0175\1\0\7\14\3\0"+
    "\2\14\13\0\4\14\2\0\1\14\1\0\12\14\2\0"+
    "\1\u0151\1\0\1\u0176\1\0\7\14\1\0\1\14\3\0"+
    "\2\14\1\0\7\14\3\0\2\14\13\0\4\14\2\0"+
    "\1\14\1\0\12\14\6\0\7\14\1\0\1\14\3\0"+
    "\2\14\1\0\7\14\3\0\1\14\1\u0177\13\0\4\14"+
    "\2\0\1\14\1\0\12\14\6\0\3\14\1\u0178\3\14"+
    "\1\0\1\14\3\0\2\14\1\0\1\u0179\6\14\3\0"+
    "\1\u017a\1\14\13\0\4\14\2\0\1\14\1\0\12\14"+
    "\6\0\7\14\1\0\1\14\3\0\2\14\1\0\2\14"+
    "\1\u017b\4\14\3\0\2\14\13\0\4\14\2\0\1\14"+
    "\1\0\12\14\6\0\7\14\1\0\1\14\3\0\2\14"+
    "\1\0\5\14\1\u017c\1\14\3\0\2\14\13\0\4\14"+
    "\2\0\1\14\1\0\12\14\12\0\1\u017d\116\0\1\u017e"+
    "\44\0\1\u017f\1\u0180\1\u0181\1\u0180\7\u0135\1\0\1\u0135"+
    "\3\0\2\u0135\1\0\7\u0135\3\0\2\u0135\1\u0180\1\334"+
    "\11\0\4\u0135\2\0\1\u0135\1\0\12\u0135\6\0\7\14"+
    "\1\0\1\14\3\0\2\14\1\0\7\14\3\0\1\u0182"+
    "\1\14\13\0\4\14\2\0\1\14\1\0\12\14\6\0"+
    "\7\14\1\0\1\14\3\0\2\14\1\0\7\14\3\0"+
    "\1\u0183\1\14\13\0\4\14\2\0\1\14\1\0\12\14"+
    "\6\0\7\14\1\0\1\14\3\0\1\14\1\u0184\1\0"+
    "\7\14\3\0\2\14\13\0\4\14\2\0\1\14\1\0"+
    "\12\14\6\0\7\14\1\0\1\14\3\0\2\14\1\0"+
    "\7\14\3\0\1\u0185\1\14\13\0\4\14\2\0\1\14"+
    "\1\0\12\14\6\0\7\14\1\0\1\14\3\0\2\14"+
    "\1\0\7\14\3\0\2\14\13\0\1\u0186\3\14\2\0"+
    "\1\14\1\0\12\14\6\0\7\14\1\0\1\14\3\0"+
    "\2\14\1\0\5\14\1\u0187\1\14\3\0\2\14\13\0"+
    "\4\14\2\0\1\14\1\0\12\14\6\0\7\14\1\0"+
    "\1\u0188\3\0\2\14\1\0\7\14\3\0\2\14\13\0"+
    "\4\14\2\0\1\14\1\0\12\14\6\0\7\14\1\0"+
    "\1\14\3\0\2\14\1\0\2\14\1\u0189\4\14\3\0"+
    "\2\14\13\0\4\14\2\0\1\14\1\0\12\14\6\0"+
    "\7\14\1\0\1\14\3\0\2\14\1\0\1\u018a\6\14"+
    "\3\0\2\14\13\0\4\14\2\0\1\14\1\0\12\14"+
    "\6\0\7\14\1\0\1\14\3\0\1\14\1\u018b\1\0"+
    "\7\14\3\0\2\14\13\0\4\14\2\0\1\14\1\0"+
    "\12\14\6\0\7\14\1\0\1\u018c\3\0\2\14\1\0"+
    "\7\14\3\0\2\14\13\0\4\14\2\0\1\14\1\0"+
    "\12\14\6\0\7\14\1\0\1\u018d\3\0\2\14\1\0"+
    "\7\14\3\0\2\14\13\0\4\14\2\0\1\14\1\0"+
    "\12\14\6\0\7\14\1\0\1\14\3\0\2\14\1\0"+
    "\2\14\1\u018e\4\14\3\0\2\14\13\0\4\14\2\0"+
    "\1\14\1\0\12\14\6\0\7\14\1\0\1\u018f\3\0"+
    "\2\14\1\0\7\14\3\0\2\14\13\0\4\14\2\0"+
    "\1\14\1\0\12\14\6\0\6\14\1\u0190\1\0\1\14"+
    "\3\0\2\14\1\0\7\14\3\0\2\14\13\0\4\14"+
    "\2\0\1\14\1\0\12\14\6\0\7\14\1\0\1\14"+
    "\3\0\2\14\1\0\1\u0191\6\14\3\0\2\14\13\0"+
    "\4\14\2\0\1\14\1\0\12\14\31\4\1\0\44\4"+
    "\31\0\1\u0192\44\0\16\225\1\u0193\6\225\1\u0194\101\225"+
    "\1\u0171\44\225\2\0\1\u0151\1\0\1\u0176\103\0\1\u0195"+
    "\63\0\33\225\1\u0196\42\225\2\6\1\u0197\1\6\1\u0198"+
    "\71\6\6\0\7\14\1\0\1\14\3\0\2\14\1\0"+
    "\4\14\1\u0199\2\14\3\0\2\14\13\0\4\14\2\0"+
    "\1\14\1\0\12\14\6\0\7\14\1\0\1\u019a\3\0"+
    "\2\14\1\0\7\14\3\0\2\14\13\0\4\14\2\0"+
    "\1\14\1\0\12\14\6\0\7\14\1\0\1\14\3\0"+
    "\2\14\1\0\1\u019b\6\14\3\0\2\14\13\0\4\14"+
    "\2\0\1\14\1\0\12\14\6\0\3\14\1\u019c\3\14"+
    "\1\0\1\14\3\0\2\14\1\0\7\14\3\0\2\14"+
    "\13\0\4\14\2\0\1\14\1\0\12\14\6\0\6\14"+
    "\1\u019d\1\0\1\14\3\0\2\14\1\0\7\14\3\0"+
    "\2\14\13\0\4\14\2\0\1\14\1\0\12\14\6\0"+
    "\7\14\1\0\1\14\3\0\2\14\1\0\2\14\1\u019e"+
    "\4\14\3\0\2\14\13\0\4\14\2\0\1\14\1\0"+
    "\12\14\6\0\7\14\1\0\1\14\3\0\1\14\1\u019f"+
    "\1\0\7\14\3\0\2\14\13\0\4\14\2\0\1\14"+
    "\1\0\12\14\6\0\7\14\1\0\1\14\3\0\2\14"+
    "\1\0\7\14\3\0\2\14\13\0\4\14\2\0\1\14"+
    "\1\0\6\14\1\u01a0\3\14\6\0\7\14\1\0\1\14"+
    "\3\0\2\14\1\0\7\14\3\0\2\14\13\0\4\14"+
    "\2\0\1\14\1\0\10\14\1\u01a1\1\14\6\0\7\14"+
    "\1\0\1\14\3\0\2\14\1\0\7\14\3\0\2\14"+
    "\13\0\1\u01a2\3\14\2\0\1\14\1\0\12\14\6\0"+
    "\7\14\1\0\1\14\3\0\2\14\1\0\4\14\1\u01a3"+
    "\2\14\3\0\2\14\13\0\4\14\2\0\1\14\1\0"+
    "\12\14\6\0\7\14\1\0\1\u01a4\3\0\2\14\1\0"+
    "\7\14\3\0\2\14\13\0\4\14\2\0\1\14\1\0"+
    "\12\14\6\0\6\14\1\u01a5\1\0\1\14\3\0\2\14"+
    "\1\0\7\14\3\0\2\14\13\0\4\14\2\0\1\14"+
    "\1\0\12\14\26\0\1\u01a6\55\0\7\14\1\0\1\u01a7"+
    "\3\0\2\14\1\0\7\14\3\0\2\14\13\0\4\14"+
    "\2\0\1\14\1\0\12\14\6\0\7\14\1\0\1\14"+
    "\3\0\2\14\1\0\2\14\1\u01a8\4\14\3\0\2\14"+
    "\13\0\4\14\2\0\1\14\1\0\12\14\6\0\7\14"+
    "\1\0\1\14\3\0\2\14\1\0\7\14\3\0\1\u01a9"+
    "\1\14\13\0\4\14\2\0\1\14\1\0\12\14\35\0"+
    "\1\u0171\46\0\7\14\1\0\1\14\3\0\2\14\1\0"+
    "\3\14\1\u01aa\3\14\3\0\2\14\13\0\4\14\2\0"+
    "\1\14\1\0\12\14\6\0\7\14\1\0\1\14\3\0"+
    "\1\14\1\u01ab\1\0\7\14\3\0\2\14\13\0\1\u01ac"+
    "\3\14\2\0\1\14\1\0\12\14\6\0\7\14\1\0"+
    "\1\14\3\0\2\14\1\0\4\14\1\u01ad\2\14\3\0"+
    "\2\14\13\0\4\14\2\0\1\14\1\0\12\14\6\0"+
    "\7\14\1\0\1\u01ae\3\0\2\14\1\0\7\14\3\0"+
    "\2\14\13\0\4\14\2\0\1\14\1\0\12\14\6\0"+
    "\3\14\1\u01af\3\14\1\0\1\14\3\0\2\14\1\0"+
    "\1\u01b0\6\14\3\0\2\14\13\0\4\14\2\0\1\14"+
    "\1\0\12\14\2\0\1\u017d\1\0\1\u01b1\107\0\1\u01b2"+
    "\6\0\1\u01b3\52\0\1\u017f\1\0\1\u0181\73\0\1\u017f"+
    "\1\u0180\1\u0181\1\u0180\1\u0135\2\0\4\u0135\1\0\1\u0135"+
    "\3\0\2\u0135\1\0\7\u0135\3\0\2\u0135\1\u0180\1\334"+
    "\11\0\4\u0135\2\0\1\u0135\1\0\4\u0135\43\0\1\u01b4"+
    "\46\0\4\14\1\u01b5\2\14\1\0\1\14\3\0\2\14"+
    "\1\0\7\14\3\0\2\14\13\0\4\14\2\0\1\14"+
    "\1\0\12\14\6\0\7\14\1\0\1\14\3\0\2\14"+
    "\1\0\4\14\1\u01b6\2\14\3\0\2\14\13\0\4\14"+
    "\2\0\1\14\1\0\12\14\6\0\7\14\1\0\1\14"+
    "\3\0\2\14\1\0\2\14\1\u01b7\4\14\3\0\2\14"+
    "\13\0\4\14\2\0\1\14\1\0\12\14\6\0\7\14"+
    "\1\0\1\14\3\0\2\14\1\0\1\u01b8\6\14\3\0"+
    "\2\14\13\0\4\14\2\0\1\14\1\0\12\14\6\0"+
    "\7\14\1\0\1\u01b9\3\0\2\14\1\0\7\14\3\0"+
    "\2\14\13\0\4\14\2\0\1\14\1\0\12\14\6\0"+
    "\7\14\1\0\1\14\3\0\2\14\1\0\1\u01ba\6\14"+
    "\3\0\2\14\13\0\4\14\2\0\1\14\1\0\12\14"+
    "\6\0\3\14\1\u01bb\3\14\1\0\1\14\3\0\2\14"+
    "\1\0\7\14\3\0\2\14\13\0\4\14\2\0\1\14"+
    "\1\0\12\14\6\0\7\14\1\0\1\14\3\0\2\14"+
    "\1\0\6\14\1\u01bc\3\0\2\14\13\0\4\14\2\0"+
    "\1\14\1\0\12\14\6\0\4\14\1\u01bd\2\14\1\0"+
    "\1\14\3\0\2\14\1\0\7\14\3\0\2\14\13\0"+
    "\4\14\2\0\1\14\1\0\12\14\6\0\4\14\1\u01be"+
    "\2\14\1\0\1\14\3\0\2\14\1\0\7\14\3\0"+
    "\2\14\13\0\4\14\2\0\1\14\1\0\12\14\6\0"+
    "\7\14\1\0\1\u01bf\3\0\2\14\1\0\7\14\3\0"+
    "\2\14\13\0\4\14\2\0\1\14\1\0\12\14\6\0"+
    "\7\14\1\0\1\14\3\0\2\14\1\0\7\14\3\0"+
    "\2\14\13\0\1\u01c0\3\14\2\0\1\14\1\0\12\14"+
    "\6\0\7\14\1\0\1\14\3\0\2\14\1\0\1\14"+
    "\1\u01c1\5\14\3\0\2\14\13\0\4\14\2\0\1\14"+
    "\1\0\12\14\4\225\1\u01c2\117\225\1\u01c3\47\225\2\0"+
    "\1\u0195\1\0\1\u01c4\71\0\16\225\1\u01c5\6\225\1\u01c6"+
    "\50\225\2\6\1\u0197\1\6\1\u01c7\22\6\1\u01c8\103\6"+
    "\1\0\40\6\6\0\7\14\1\0\1\14\3\0\1\14"+
    "\1\u01c9\1\0\7\14\3\0\2\14\13\0\4\14\2\0"+
    "\1\14\1\0\12\14\6\0\7\14\1\0\1\14\3\0"+
    "\2\14\1\0\7\14\3\0\2\14\13\0\1\14\1\u01ca"+
    "\2\14\2\0\1\14\1\0\12\14\6\0\7\14\1\0"+
    "\1\14\3\0\2\14\1\0\2\14\1\u01cb\4\14\3\0"+
    "\2\14\13\0\4\14\2\0\1\14\1\0\12\14\6\0"+
    "\7\14\1\0\1\u01cc\3\0\2\14\1\0\7\14\3\0"+
    "\2\14\13\0\4\14\2\0\1\14\1\0\12\14\6\0"+
    "\7\14\1\0\1\14\3\0\2\14\1\0\7\14\3\0"+
    "\2\14\13\0\1\u01cd\3\14\2\0\1\14\1\0\12\14"+
    "\6\0\7\14\1\0\1\14\3\0\2\14\1\0\7\14"+
    "\3\0\2\14\13\0\4\14\2\0\1\14\1\0\5\14"+
    "\1\u01ce\1\14\1\u01cf\2\14\6\0\7\14\1\0\1\14"+
    "\3\0\2\14\1\0\4\14\1\u01d0\2\14\3\0\2\14"+
    "\13\0\4\14\2\0\1\14\1\0\12\14\6\0\7\14"+
    "\1\0\1\14\3\0\2\14\1\0\7\14\3\0\2\14"+
    "\13\0\1\u01d1\3\14\2\0\1\14\1\0\12\14\6\0"+
    "\7\14\1\0\1\14\3\0\1\14\1\u01d2\1\0\7\14"+
    "\3\0\2\14\13\0\4\14\2\0\1\14\1\0\12\14"+
    "\6\0\7\14\1\0\1\14\3\0\2\14\1\0\7\14"+
    "\3\0\1\14\1\u01d3\13\0\4\14\2\0\1\14\1\0"+
    "\12\14\6\0\7\14\1\0\1\14\3\0\2\14\1\0"+
    "\5\14\1\u01d4\1\14\3\0\2\14\13\0\4\14\2\0"+
    "\1\14\1\0\12\14\24\u01a6\1\u01d5\51\u01a6\6\0\7\14"+
    "\1\0\1\14\3\0\2\14\1\0\7\14\3\0\1\u01d6"+
    "\1\14\13\0\4\14\2\0\1\14\1\0\12\14\6\0"+
    "\4\14\1\u01d7\2\14\1\0\1\14\3\0\2\14\1\0"+
    "\7\14\3\0\2\14\13\0\4\14\2\0\1\14\1\0"+
    "\12\14\6\0\7\14\1\0\1\14\3\0\2\14\1\0"+
    "\7\14\3\0\1\u01d8\1\14\13\0\4\14\2\0\1\14"+
    "\1\0\12\14\6\0\7\14\1\0\1\14\3\0\2\14"+
    "\1\0\7\14\3\0\2\14\13\0\2\14\1\u01d9\1\14"+
    "\2\0\1\14\1\0\12\14\6\0\7\14\1\0\1\14"+
    "\3\0\2\14\1\0\2\14\1\u01da\4\14\3\0\2\14"+
    "\13\0\4\14\2\0\1\14\1\0\12\14\6\0\7\14"+
    "\1\0\1\14\3\0\1\14\1\u01db\1\0\7\14\3\0"+
    "\2\14\13\0\4\14\2\0\1\14\1\0\12\14\6\0"+
    "\7\14\1\0\1\14\3\0\1\14\1\u01dc\1\0\7\14"+
    "\3\0\2\14\13\0\4\14\2\0\1\14\1\0\12\14"+
    "\6\0\7\14\1\0\1\14\3\0\2\14\1\0\4\14"+
    "\1\u01dd\2\14\3\0\2\14\13\0\4\14\2\0\1\14"+
    "\1\0\12\14\35\0\1\u011e\42\0\1\u01b2\1\0\1\u01de"+
    "\117\0\1\u01df\55\0\3\14\1\u01e0\3\14\1\0\1\14"+
    "\3\0\2\14\1\0\7\14\3\0\2\14\13\0\4\14"+
    "\2\0\1\14\1\0\12\14\6\0\7\14\1\0\1\14"+
    "\3\0\2\14\1\0\5\14\1\u01e1\1\14\3\0\2\14"+
    "\13\0\4\14\2\0\1\14\1\0\12\14\6\0\7\14"+
    "\1\0\1\14\3\0\2\14\1\0\7\14\3\0\2\14"+
    "\13\0\2\14\1\u01e2\1\14\2\0\1\14\1\0\12\14"+
    "\6\0\7\14\1\0\1\14\3\0\2\14\1\0\6\14"+
    "\1\u01e3\3\0\2\14\13\0\4\14\2\0\1\14\1\0"+
    "\12\14\6\0\7\14\1\0\1\14\3\0\1\u01e4\1\14"+
    "\1\0\7\14\3\0\2\14\13\0\4\14\2\0\1\14"+
    "\1\0\12\14\6\0\7\14\1\0\1\14\3\0\2\14"+
    "\1\0\7\14\3\0\1\u01e5\1\14\13\0\4\14\2\0"+
    "\1\14\1\0\12\14\6\0\7\14\1\0\1\14\3\0"+
    "\2\14\1\0\7\14\3\0\2\14\13\0\1\u01e6\3\14"+
    "\2\0\1\14\1\0\12\14\6\0\7\14\1\0\1\14"+
    "\3\0\2\14\1\0\1\u01e7\6\14\3\0\2\14\13\0"+
    "\4\14\2\0\1\14\1\0\12\14\35\225\1\0\40\225"+
    "\35\0\1\u014e\42\0\1\u01c5\1\0\1\u01e8\71\0\26\225"+
    "\1\u01e9\47\225\27\6\1\u01c8\75\6\1\u01c8\1\u01ea\45\6"+
    "\6\0\7\14\1\0\1\14\3\0\2\14\1\0\5\14"+
    "\1\u01eb\1\14\3\0\2\14\13\0\4\14\2\0\1\14"+
    "\1\0\12\14\6\0\7\14\1\0\1\14\3\0\2\14"+
    "\1\0\1\u01ec\6\14\3\0\2\14\13\0\4\14\2\0"+
    "\1\14\1\0\12\14\6\0\7\14\1\0\1\14\3\0"+
    "\2\14\1\0\6\14\1\u01ed\3\0\2\14\13\0\4\14"+
    "\2\0\1\14\1\0\12\14\6\0\7\14\1\0\1\14"+
    "\3\0\2\14\1\0\7\14\3\0\2\14\13\0\1\u01ee"+
    "\3\14\2\0\1\14\1\0\12\14\6\0\7\14\1\0"+
    "\1\14\3\0\2\14\1\0\7\14\3\0\2\14\13\0"+
    "\4\14\2\0\1\14\1\0\6\14\1\u01ef\3\14\6\0"+
    "\7\14\1\0\1\14\3\0\2\14\1\0\7\14\3\0"+
    "\2\14\13\0\4\14\2\0\1\14\1\0\10\14\1\u01f0"+
    "\1\14\6\0\7\14\1\0\1\14\3\0\2\14\1\0"+
    "\5\14\1\u0162\1\14\3\0\2\14\13\0\4\14\2\0"+
    "\1\14\1\0\12\14\6\0\7\14\1\0\1\14\3\0"+
    "\2\14\1\0\5\14\1\u01f1\1\14\3\0\2\14\13\0"+
    "\4\14\2\0\1\14\1\0\12\14\6\0\7\14\1\0"+
    "\1\14\3\0\1\u01f2\1\14\1\0\7\14\3\0\2\14"+
    "\13\0\4\14\2\0\1\14\1\0\12\14\6\0\7\14"+
    "\1\0\1\u01f3\3\0\2\14\1\0\7\14\3\0\2\14"+
    "\13\0\4\14\2\0\1\14\1\0\12\14\27\u01a6\1\u01f4"+
    "\46\u01a6\6\0\7\14\1\0\1\14\3\0\2\14\1\0"+
    "\7\14\3\0\2\14\13\0\4\14\2\0\1\14\1\0"+
    "\4\14\1\u01f5\1\u01f6\1\u01f7\1\u01f8\2\14\6\0\4\14"+
    "\1\u01f9\2\14\1\0\1\14\3\0\2\14\1\0\7\14"+
    "\3\0\2\14\13\0\4\14\2\0\1\14\1\0\12\14"+
    "\6\0\7\14\1\0\1\14\3\0\2\14\1\0\7\14"+
    "\3\0\2\14\13\0\4\14\2\0\1\14\1\0\1\u01fa"+
    "\11\14\6\0\7\14\1\0\1\14\3\0\2\14\1\0"+
    "\5\14\1\u01fb\1\14\3\0\2\14\13\0\4\14\2\0"+
    "\1\14\1\0\12\14\6\0\7\14\1\0\1\14\3\0"+
    "\2\14\1\0\7\14\3\0\1\u01fc\1\14\13\0\4\14"+
    "\2\0\1\14\1\0\12\14\6\0\7\14\1\0\1\14"+
    "\3\0\2\14\1\0\2\14\1\u01f5\4\14\3\0\2\14"+
    "\13\0\4\14\2\0\1\14\1\0\12\14\35\0\1\u016f"+
    "\40\0\27\u01fd\1\u01fe\46\u01fd\6\0\7\14\1\0\1\u01ff"+
    "\3\0\2\14\1\0\7\14\3\0\2\14\13\0\4\14"+
    "\2\0\1\14\1\0\12\14\6\0\7\14\1\0\1\u0200"+
    "\3\0\2\14\1\0\7\14\3\0\2\14\13\0\4\14"+
    "\2\0\1\14\1\0\12\14\6\0\7\14\1\0\1\14"+
    "\3\0\2\14\1\0\7\14\3\0\1\u0201\1\14\13\0"+
    "\4\14\2\0\1\14\1\0\12\14\6\0\7\14\1\0"+
    "\1\14\3\0\2\14\1\0\5\14\1\u01a0\1\14\3\0"+
    "\2\14\13\0\4\14\2\0\1\14\1\0\12\14\6\0"+
    "\7\14\1\0\1\u0202\3\0\2\14\1\0\7\14\3\0"+
    "\2\14\13\0\4\14\2\0\1\14\1\0\12\14\35\0"+
    "\1\u0193\40\0\16\6\1\u0203\10\6\1\u01c8\46\6\6\0"+
    "\7\14\1\0\1\14\3\0\2\14\1\0\7\14\3\0"+
    "\2\14\13\0\4\14\2\0\1\14\1\0\4\14\1\u0204"+
    "\1\u0205\1\u0206\1\u0207\2\14\6\0\7\14\1\0\1\14"+
    "\3\0\2\14\1\0\7\14\3\0\2\14\13\0\1\u0208"+
    "\3\14\2\0\1\14\1\0\12\14\6\0\7\14\1\0"+
    "\1\14\3\0\2\14\1\0\6\14\1\u0209\3\0\2\14"+
    "\13\0\4\14\2\0\1\14\1\0\12\14\6\0\7\14"+
    "\1\0\1\14\3\0\2\14\1\0\5\14\1\u01a1\1\14"+
    "\3\0\2\14\13\0\4\14\2\0\1\14\1\0\12\14"+
    "\6\0\7\14\1\0\1\14\3\0\1\14\1\u020a\1\0"+
    "\7\14\3\0\2\14\13\0\4\14\2\0\1\14\1\0"+
    "\12\14\6\0\7\14\1\0\1\14\3\0\2\14\1\0"+
    "\7\14\3\0\1\u020b\1\14\13\0\4\14\2\0\1\14"+
    "\1\0\12\14\30\u01a6\1\u020c\45\u01a6\6\0\7\14\1\0"+
    "\1\14\3\0\2\14\1\0\7\14\3\0\2\14\13\0"+
    "\4\14\2\0\1\14\1\0\6\14\1\u020d\3\14\6\0"+
    "\7\14\1\0\1\14\3\0\2\14\1\0\7\14\3\0"+
    "\2\14\13\0\4\14\2\0\1\14\1\0\11\14\1\u020e"+
    "\6\0\7\14\1\0\1\14\3\0\2\14\1\0\7\14"+
    "\3\0\2\14\13\0\4\14\2\0\1\14\1\0\10\14"+
    "\1\u020f\1\14\6\0\7\14\1\0\1\14\3\0\2\14"+
    "\1\0\5\14\1\u0210\1\14\3\0\2\14\13\0\4\14"+
    "\2\0\1\14\1\0\12\14\6\0\4\14\1\u0204\2\14"+
    "\1\0\1\14\3\0\2\14\1\0\7\14\3\0\2\14"+
    "\13\0\4\14\2\0\1\14\1\0\12\14\27\u01fd\1\u0211"+
    "\76\u01fd\1\u0212\45\u01fd\6\0\7\14\1\0\1\14\3\0"+
    "\2\14\1\0\2\14\1\u0213\4\14\3\0\2\14\13\0"+
    "\4\14\2\0\1\14\1\0\12\14\6\0\7\14\1\0"+
    "\1\u0214\3\0\2\14\1\0\7\14\3\0\2\14\13\0"+
    "\4\14\2\0\1\14\1\0\12\14\6\0\4\14\1\u0215"+
    "\2\14\1\0\1\14\3\0\2\14\1\0\7\14\3\0"+
    "\2\14\13\0\4\14\2\0\1\14\1\0\12\14\27\6"+
    "\1\u01c8\1\6\1\u0197\44\6\6\0\7\14\1\0\1\14"+
    "\3\0\2\14\1\0\7\14\3\0\2\14\13\0\4\14"+
    "\2\0\1\14\1\0\6\14\1\u0216\3\14\6\0\7\14"+
    "\1\0\1\14\3\0\2\14\1\0\7\14\3\0\2\14"+
    "\13\0\4\14\2\0\1\14\1\0\11\14\1\u0217\6\0"+
    "\7\14\1\0\1\14\3\0\2\14\1\0\7\14\3\0"+
    "\2\14\13\0\4\14\2\0\1\14\1\0\10\14\1\u0218"+
    "\1\14\6\0\7\14\1\0\1\14\3\0\2\14\1\0"+
    "\4\14\1\u0219\2\14\3\0\2\14\13\0\4\14\2\0"+
    "\1\14\1\0\12\14\6\0\7\14\1\0\1\14\3\0"+
    "\2\14\1\0\7\14\3\0\1\u021a\1\14\13\0\4\14"+
    "\2\0\1\14\1\0\12\14\16\u01a6\1\u021b\57\u01a6\6\0"+
    "\7\14\1\0\1\u021c\3\0\2\14\1\0\7\14\3\0"+
    "\2\14\13\0\4\14\2\0\1\14\1\0\12\14\30\u01fd"+
    "\1\u021d\63\u01fd\1\u021e\57\u01fd\6\0\4\14\1\u021f\2\14"+
    "\1\0\1\14\3\0\2\14\1\0\7\14\3\0\2\14"+
    "\13\0\4\14\2\0\1\14\1\0\12\14\31\u01a6\1\u016f"+
    "\44\u01a6\6\0\7\14\1\0\1\14\3\0\2\14\1\0"+
    "\7\14\3\0\2\14\13\0\1\14\1\u0220\2\14\2\0"+
    "\1\14\1\0\12\14\16\u01fd\1\u0221\110\u01fd\1\u0222\44\u01fd"+
    "\6\0\7\14\1\0\1\u0223\3\0\2\14\1\0\7\14"+
    "\3\0\2\14\13\0\4\14\2\0\1\14\1\0\12\14"+
    "\31\u01fd\1\u0224\46\u01fd\1\u0225\1\u01fd\1\u0226\71\u01fd\6\0"+
    "\4\14\1\u0227\2\14\1\0\1\14\3\0\2\14\1\0"+
    "\7\14\3\0\2\14\13\0\4\14\2\0\1\14\1\0"+
    "\12\14\2\u01fd\1\u0228\1\u01fd\1\u0229\73\u01fd\1\u0225\1\u01fd"+
    "\1\u022a\22\u01fd\1\u022b\103\u01fd\1\0\42\u01fd\1\u0228\1\u01fd"+
    "\1\u022c\22\u01fd\1\u022b\103\u01fd\1\u016f\67\u01fd\1\u022b\75\u01fd"+
    "\1\u022b\1\u022d\74\u01fd\1\u022b\5\u01fd\1\u022e\56\u01fd\1\u022f"+
    "\10\u01fd\1\u022b\75\u01fd\1\u022b\1\u01fd\1\u0228\44\u01fd";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25854];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\10\4\1\1\11\2\1\2\11\10\1\1\11"+
    "\15\1\1\11\3\1\12\11\3\1\3\11\4\1\3\0"+
    "\1\1\4\0\1\11\1\0\1\11\1\1\1\0\20\1"+
    "\1\11\3\1\1\0\1\1\1\0\7\1\3\0\17\1"+
    "\1\11\1\1\3\11\3\1\1\11\17\1\2\0\1\11"+
    "\1\0\1\1\1\0\1\11\2\0\2\1\3\0\1\11"+
    "\24\1\1\11\5\1\4\11\7\1\2\0\1\11\1\0"+
    "\1\11\21\1\4\0\11\1\1\11\16\1\2\0\1\1"+
    "\1\0\1\11\2\0\1\1\4\0\7\1\1\11\6\1"+
    "\1\11\13\1\1\11\2\1\1\11\2\0\4\1\1\11"+
    "\4\1\1\11\2\1\3\11\2\1\2\0\1\11\1\0"+
    "\3\1\1\11\1\1\2\11\2\1\1\11\14\1\2\0"+
    "\1\11\3\0\1\1\2\0\11\1\1\11\1\1\1\11"+
    "\4\1\1\11\11\1\1\11\1\0\1\11\4\1\1\0"+
    "\6\1\5\0\20\1\1\0\1\11\3\0\1\1\1\0"+
    "\15\1\1\0\12\1\3\0\1\11\15\1\1\0\1\11"+
    "\3\0\16\1\1\0\10\1\2\0\10\1\1\0\1\11"+
    "\12\1\1\0\10\1\2\0\15\1\1\0\4\1\2\0"+
    "\10\1\1\0\1\1\2\0\2\1\2\0\1\1\3\0"+
    "\1\1\6\0\1\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[559];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  public ModulaLexer(java.io.Reader in, Project project) {
  
	super(project, YYINITIAL, INVALID_CONDITIONAL_CODE, ERRORNEOUS_CONDITIONAL_CODE, COMPILE_TIME_CONDITION, P1_COMPILE_TIME_CONDITION, COMMENT);

    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ModulaLexer(java.io.InputStream in, Project project) {
    this(new java.io.InputStreamReader(in), project);
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 141: 
          { return ModulaTypes.PROCEDURE;
          }
        case 149: break;
        case 119: 
          { return ModulaTypes.TOKEN_INTEGER;
          }
        case 150: break;
        case 133: 
          { return ModulaTypes.VOLATILE;
          }
        case 151: break;
        case 33: 
          { return ModulaTypes.RANGE_OPERATOR;
          }
        case 152: break;
        case 30: 
          { return ModulaTypes.INT_CONST_BASE_16;
          }
        case 153: break;
        case 76: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 3;
          { return ModulaTypes.SHIFT_RIGHT;
          }
        case 154: break;
        case 128: 
          { return ModulaTypes.TOKEN_BITSET32;
          }
        case 155: break;
        case 75: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 3;
          { return ModulaTypes.SHIFT_LEFT;
          }
        case 156: break;
        case 103: 
          { return ModulaTypes.WHILE;
          }
        case 157: break;
        case 69: 
          { return ModulaTypes.FROM;
          }
        case 158: break;
        case 41: 
          { return ModulaTypes.GREATER_EQUALS;
          }
        case 159: break;
        case 68: 
          { return validEnd();
          }
        case 160: break;
        case 7: 
          { return ModulaTypes.OPEN_BRACE;
          }
        case 161: break;
        case 28: 
          { return ModulaTypes.POINTER_DEREFERENCE_OPERATOR;
          }
        case 162: break;
        case 66: 
          { return ModulaTypes.EXIT;
          }
        case 163: break;
        case 134: 
          { return ModulaTypes.TOKEN_SHORTCARD;
          }
        case 164: break;
        case 62: 
          { return ModulaTypes.TOKEN_CHAR;
          }
        case 165: break;
        case 63: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 3;
          { return ModulaTypes.DIVISION;
          }
        case 166: break;
        case 47: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return ModulaTypes.FOR_LOOP_INCREMENT;
          }
        case 167: break;
        case 9: 
          { return ModulaTypes.CLOSE_BRACE;
          }
        case 168: break;
        case 109: 
          { return ModulaTypes.NOHIGH;
          }
        case 169: break;
        case 83: 
          { return ModulaTypes.WITH;
          }
        case 170: break;
        case 138: 
          { return ModulaTypes.TOKEN_INTEGER64;
          }
        case 171: break;
        case 94: 
          { return ModulaTypes.UNTIL;
          }
        case 172: break;
        case 147: 
          { return ModulaTypes.TOKEN_LONGCOMPLEX;
          }
        case 173: break;
        case 70: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 3;
          { return ModulaTypes.FOR;
          }
        case 174: break;
        case 43: 
          { return ModulaTypes.OF;
          }
        case 175: break;
        case 142: 
          { return ModulaTypes.QUALIFIED;
          }
        case 176: break;
        case 136: 
          { return ModulaTypes.ASSEMBLER;
          }
        case 177: break;
        case 84: 
          { return invalidEnd();
          }
        case 178: break;
        case 85: 
          { return ModulaTypes.CONST;
          }
        case 179: break;
        case 58: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return ModulaTypes.OR;
          }
        case 180: break;
        case 21: 
          { return ModulaTypes.SQUARE_BRACE_OPEN;
          }
        case 181: break;
        case 108: 
          { return ModulaTypes.IMPORT;
          }
        case 182: break;
        case 99: 
          { return ModulaTypes.INOUT;
          }
        case 183: break;
        case 31: 
          { return ModulaTypes.INT_CONST_BASE_8;
          }
        case 184: break;
        case 36: 
          { return ModulaTypes.IF;
          }
        case 185: break;
        case 145: 
          { return ModulaTypes.TOKEN_CARDINAL32;
          }
        case 186: break;
        case 39: 
          { return ModulaTypes.LESS_EQUALS;
          }
        case 187: break;
        case 106: 
          { return ModulaTypes.TOKEN_WORDBOOL;
          }
        case 188: break;
        case 46: 
          { return ModulaTypes.BIG;
          }
        case 189: break;
        case 101: 
          { return ModulaTypes.MACRO;
          }
        case 190: break;
        case 16: 
          { return ModulaTypes.BY;
          }
        case 191: break;
        case 29: 
          { return openComment();
          }
        case 192: break;
        case 8: 
          { return ModulaTypes.TIMES;
          }
        case 193: break;
        case 104: 
          { return invalidElse();
          }
        case 194: break;
        case 100: 
          { return ModulaTypes.SMALL;
          }
        case 195: break;
        case 55: 
          { return ModulaTypes.FAR;
          }
        case 196: break;
        case 131: 
          { return ModulaTypes.TOKEN_LONGCARD;
          }
        case 197: break;
        case 44: 
          { return closeComment();
          }
        case 198: break;
        case 98: 
          { return ModulaTypes.COMPILE_TIME_THEN;
          }
        case 199: break;
        case 4: 
          { return ModulaTypes.COMPILE_TIME_INVALID_CODE;
          }
        case 200: break;
        case 95: 
          { return ModulaTypes.TOKEN_ACHAR;
          }
        case 201: break;
        case 77: 
          { return validIf(true);
          }
        case 202: break;
        case 80: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 3;
          { return ModulaTypes.ROTATE_LEFT;
          }
        case 203: break;
        case 40: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return ModulaTypes.GREATER_THAN;
          }
        case 204: break;
        case 115: 
          { return ModulaTypes.PUBLIC;
          }
        case 205: break;
        case 25: 
          { return ModulaTypes.PLUS;
          }
        case 206: break;
        case 88: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 4;
          { return ModulaTypes.BITWISE_AND;
          }
        case 207: break;
        case 53: 
          { return validIf(false);
          }
        case 208: break;
        case 89: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 4;
          { return ModulaTypes.BITWISE_NOT;
          }
        case 209: break;
        case 23: 
          { return ModulaTypes.PIPE;
          }
        case 210: break;
        case 123: 
          { return ModulaTypes.PUREASM;
          }
        case 211: break;
        case 113: 
          { return ModulaTypes.REPEAT;
          }
        case 212: break;
        case 52: 
          { return ModulaTypes.STRING_CONST_DOUBLE_ANSI;
          }
        case 213: break;
        case 126: 
          { return ModulaTypes.TOKEN_CARDINAL;
          }
        case 214: break;
        case 105: 
          { return ModulaTypes.TOKEN_BITSET;
          }
        case 215: break;
        case 121: 
          { return ModulaTypes.TOKEN_LONGINT;
          }
        case 216: break;
        case 79: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 3;
          { return ModulaTypes.REMAINDER;
          }
        case 217: break;
        case 93: 
          { return ModulaTypes.TOKEN_UCHAR;
          }
        case 218: break;
        case 86: 
          { return ModulaTypes.CMPLX;
          }
        case 219: break;
        case 38: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { return ModulaTypes.LESS_THAN;
          }
        case 220: break;
        case 22: 
          { return ModulaTypes.SQUARE_BRACE_CLOSE;
          }
        case 221: break;
        case 24: 
          { return ModulaTypes.DIFFERENT;
          }
        case 222: break;
        case 96: 
          { return ModulaTypes.ARRAY;
          }
        case 223: break;
        case 10: 
          { return ModulaTypes.IDENTIFIER;
          }
        case 224: break;
        case 1: 
          { return TokenType.WHITE_SPACE;
          }
        case 225: break;
        case 146: 
          { return ModulaTypes.DEFINITION;
          }
        case 226: break;
        case 124: 
          { return ModulaTypes.POINTER;
          }
        case 227: break;
        case 11: 
          { return ModulaTypes.INT_CONST_BASE_10;
          }
        case 228: break;
        case 118: 
          { return ModulaTypes.TOKEN_BOOLEAN;
          }
        case 229: break;
        case 35: 
          { return ModulaTypes.STRING_CONST_DOUBLE;
          }
        case 230: break;
        case 17: 
          { return ModulaTypes.EQUALITY_OPERATOR;
          }
        case 231: break;
        case 60: 
          { return invalidIf();
          }
        case 232: break;
        case 51: 
          { return ModulaTypes.STRING_CONST_DOUBLE_UNICODE;
          }
        case 233: break;
        case 13: 
          { return ModulaTypes.MINUS;
          }
        case 234: break;
        case 137: 
          { return ModulaTypes.TOKEN_INTEGER16;
          }
        case 235: break;
        case 20: 
          { return ModulaTypes.CURLY_BRACE_CLOSE;
          }
        case 236: break;
        case 144: 
          { return ModulaTypes.TOKEN_CARDINAL64;
          }
        case 237: break;
        case 107: 
          { return ModulaTypes.TOKEN_DWORDBOOL;
          }
        case 238: break;
        case 114: 
          { return ModulaTypes.MODULE;
          }
        case 239: break;
        case 14: 
          { return ModulaTypes.COMMA;
          }
        case 240: break;
        case 12: 
          { return ModulaTypes.DOT;
          }
        case 241: break;
        case 112: 
          { return ModulaTypes.RETURN;
          }
        case 242: break;
        case 3: 
          { return evaluateCondition(CompileTimeConditionLanguage.INSTANCE);
          }
        case 243: break;
        case 48: 
          { return ModulaTypes.END;
          }
        case 244: break;
        case 90: 
          { return ModulaTypes.TOKEN_BYTEBOOL;
          }
        case 245: break;
        case 116: 
          { return invalidElsif(false);
          }
        case 246: break;
        case 6: 
          { return ModulaTypes.ANYTHING;
          }
        case 247: break;
        case 140: 
          { return ModulaTypes.PACKEDSET;
          }
        case 248: break;
        case 15: 
          { return ModulaTypes.TYPING_OPERATOR;
          }
        case 249: break;
        case 135: 
          { return ModulaTypes.DLLACCESS;
          }
        case 250: break;
        case 122: 
          { return ModulaTypes.GENERIC;
          }
        case 251: break;
        case 65: 
          { return ModulaTypes.ELSE;
          }
        case 252: break;
        case 120: 
          { return ModulaTypes.FORWARD;
          }
        case 253: break;
        case 97: 
          { return validElse();
          }
        case 254: break;
        case 129: 
          { return ModulaTypes.EXTERNAL;
          }
        case 255: break;
        case 34: 
          { return ModulaTypes.STRING_CONST_SINGLE;
          }
        case 256: break;
        case 127: 
          { return ModulaTypes.TOKEN_BITSET16;
          }
        case 257: break;
        case 91: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 4;
          { return ModulaTypes.BITWISE_XOR;
          }
        case 258: break;
        case 67: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 3;
          { return ModulaTypes.AND;
          }
        case 259: break;
        case 26: 
          { return ModulaTypes.AND;
          }
        case 260: break;
        case 78: 
          { return ModulaTypes.TOKEN_REAL;
          }
        case 261: break;
        case 27: 
          { return ModulaTypes.NOT;
          }
        case 262: break;
        case 73: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 3;
          { return ModulaTypes.NOT;
          }
        case 263: break;
        case 72: 
          { return ModulaTypes.TYPE;
          }
        case 264: break;
        case 82: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 3;
          { return ModulaTypes.MODULO;
          }
        case 265: break;
        case 125: 
          { return invalidElsif(true);
          }
        case 266: break;
        case 5: 
          { return evaluateCondition(P1CompileTimeConditionLanguage.INSTANCE);
          }
        case 267: break;
        case 59: 
          { return ModulaTypes.VAR;
          }
        case 268: break;
        case 19: 
          { return ModulaTypes.CURLY_BRACE_OPEN;
          }
        case 269: break;
        case 74: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 3;
          { return ModulaTypes.SHIFT_ARITHMETIC_RIGHT;
          }
        case 270: break;
        case 110: 
          { return ModulaTypes.COMPILER_DIRECTIVE;
          }
        case 271: break;
        case 61: 
          { return ModulaTypes.CASE;
          }
        case 272: break;
        case 102: 
          { return ModulaTypes.VALUE;
          }
        case 273: break;
        case 87: 
          { return ModulaTypes.BEGIN;
          }
        case 274: break;
        case 42: 
          { return ModulaTypes.ASSIGNMENT_OPERATOR;
          }
        case 275: break;
        case 32: 
          { return ModulaTypes.CHAR_CONST;
          }
        case 276: break;
        case 139: 
          { return ModulaTypes.TOKEN_INTEGER32;
          }
        case 277: break;
        case 64: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 3;
          { return ModulaTypes.BITWISE_OR;
          }
        case 278: break;
        case 54: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 2;
          { return ModulaTypes.CONTAINS;
          }
        case 279: break;
        case 92: 
          { return ModulaTypes.ELSIF;
          }
        case 280: break;
        case 49: 
          { return ModulaTypes.STRING_CONST_SINGLE_UNICODE;
          }
        case 281: break;
        case 18: 
          { return ModulaTypes.END_OF_STATEMENT;
          }
        case 282: break;
        case 50: 
          { return ModulaTypes.STRING_CONST_SINGLE_ANSI;
          }
        case 283: break;
        case 45: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { return ModulaTypes.REAL_CONST;
          }
        case 284: break;
        case 81: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 3;
          { return ModulaTypes.ROTATE_RIGHT;
          }
        case 285: break;
        case 117: 
          { return ModulaTypes.TOKEN_COMPLEX;
          }
        case 286: break;
        case 111: 
          { return ModulaTypes.RECORD;
          }
        case 287: break;
        case 148: 
          { return ModulaTypes.UNSAFEGUARDED;
          }
        case 288: break;
        case 37: 
          { return ModulaTypes.TO;
          }
        case 289: break;
        case 57: 
          { return ModulaTypes.OUT;
          }
        case 290: break;
        case 56: 
          { return ModulaTypes.SET;
          }
        case 291: break;
        case 2: 
          { return ModulaTypes.COMMENT;
          }
        case 292: break;
        case 143: 
          { return ModulaTypes.TOKEN_CARDINAL16;
          }
        case 293: break;
        case 71: 
          { return ModulaTypes.THEN;
          }
        case 294: break;
        case 132: 
          { return ModulaTypes.TOKEN_LONGREAL;
          }
        case 295: break;
        case 130: 
          { return ModulaTypes.TOKEN_SHORTINT;
          }
        case 296: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
